Author of SUP-SeeYourPoint: Kacu Kacper Kaleta [https://github.com/Ptysiek]
File generation date:  Fri Mar  5 00:52:25 2021


### Table Of Contents: #####################################################
############################################################################

	[source/]
		DataParsers
		DataStructures
		FileBuilder.hpp
		FileDataBuilder.hpp
		GeneratorTxt.hpp
		PathInitializer.ut.cpp
		Program.hpp
		ProgramInitializer.hpp
		ProjectBuilder.hpp
		Tools
		catch_main.cpp
		iSyntaxBuilder.hpp
		main.cpp

		[source/data parsers/]
			CommentParser.ut.cpp
			CommentParser.ut.hpp
			CommentParser.hpp
			DirectiveParser.hpp
			IncludeParser.hpp
			SyntaxParser.hpp

		[source/data structures/]
			Class.hpp
			File.hpp
			FileData.hpp
			Instruction.hpp
			iSyntax.hpp

		[source/tools/]
			Converter.hpp
			FileIO.hpp
			IgnoreFiles.cpp
			IgnoreFiles.hpp




### ../source/DataParsers ##################################################
############################################################################
This file summary:
	Files included:  [4]
		data parsers/CommentParser.hpp
		data parsers/DirectiveParser.hpp
		data parsers/IncludeParser.hpp
		data parsers/SyntaxParser.hpp


This file documentation:
[namespace DataParsers {
Has 5 instructions
Has 0 classes

]

### ../source/DataStructures ###############################################
############################################################################
This file summary:
	Libraries included:  [3]
		<memory>
		<string>
		<vector>

	Files included:  [5]
		data structures/Class.hpp
		data structures/File.hpp
		data structures/FileData.hpp
		data structures/Instruction.hpp
		data structures/iSyntax.hpp


This file documentation:
[namespace DataStructures {
Has 5 instructions
Has 0 classes

]

### ../source/FileBuilder.hpp ##############################################
############################################################################
This file summary:
	Libraries included:  [1]
		<string>

	Files included:  [2]
		DataStructures
		Tools


This file documentation:
[class FileBuilder {
Has 8 instructions
Has 8 classes

	public:
explicit FileBuilder(
const std::string& initPath,
const std::string& path,
const std::string& fullName,
const std::vector<File>& subfiles,
const size_t depth
):
initPath_(Converter::AppendConditionalSlash(initPath)),
path_(Converter::AppendConditionalSlash(path)),
name_(BuildName(fullName, subfiles.empty())),
format_(CutoutFormat(fullName)),
product_(BuildProduct(subfiles, depth))
{
Has 1 instructions
Has 0 classes



	File getProduct() const {
Has 2 instructions
Has 0 classes



	static File buildRoot(const std::string& initPath, const std::vector<File>& subFiles) {
Has 2 instructions
Has 1 classes

	return {
Has 1 instructions
Has 0 classes





	protected:
File BuildProduct(const std::vector<File>& subFiles, size_t depth) {
Has 2 instructions
Has 1 classes

	return {
Has 1 instructions
Has 0 classes





	static size_t CountRecursive(const std::vector<File>& subFiles) {
Has 3 instructions
Has 1 classes

	for (const auto& file : subFiles) {
Has 2 instructions
Has 0 classes





	std::string BuildName(const std::string& str, const bool isEmpty) const {
Has 3 instructions
Has 1 classes

	if (!isEmpty) {
Has 2 instructions
Has 0 classes





	std::string CutoutName(const std::string& str) const {
Has 6 instructions
Has 2 classes

	if (Tools::IgnoreFiles::isIgnored(str)) {
Has 2 instructions
Has 0 classes



	if (index == std::string::npos) {
Has 2 instructions
Has 0 classes





	std::string CutoutFormat(const std::string& str) const {
Has 5 instructions
Has 2 classes

	if (Tools::IgnoreFiles::isIgnored(str)) {
Has 2 instructions
Has 0 classes



	if (index == std::string::npos) {
Has 2 instructions
Has 0 classes





]

### ../source/FileDataBuilder.hpp ##########################################
############################################################################
This file summary:
	Files included:  [3]
		DataParsers
		DataStructures
		Tools


This file documentation:
[using namespace DataParsers;]
[class FileDataBuilder {
Has 10 instructions
Has 6 classes

	public:
FileDataBuilder(const File& file):
productExist_(false),
rawData_(),
fileHeader_(file),
product_(BuildProduct()),
libIncludes_(),
projIncludes_()
{
Has 1 instructions
Has 0 classes



	bool dataExist() const {
Has 2 instructions
Has 0 classes



	FileData getProduct() const {
Has 2 instructions
Has 0 classes



	private:
FileData BuildProduct() {
Has 6 instructions
Has 2 classes

	if (fileHeader_.isCatalog()) {
Has 2 instructions
Has 0 classes



	return {
Has 1 instructions
Has 0 classes





	FileData BuildEmptyData() {
Has 3 instructions
Has 0 classes



	Data PrepareData(Data rawData) {
Has 10 instructions
Has 0 classes



]

### ../source/GeneratorTxt.hpp #############################################
############################################################################
This file summary:
	Libraries included:  [2]
		<chrono>
		<sstream>

	Files included:  [2]
		DataStructures
		Tools


This file documentation:
[class GeneratorTxt {
Has 4 instructions
Has 7 classes

	public:
explicit GeneratorTxt(const std::string& targetPath, const std::vector<File>& data):
separator_("############################################################################\n"),
targetPath_(targetPath),
data_(data)
{
Has 1 instructions
Has 0 classes



	std::string buildFile() {
Has 8 instructions
Has 1 classes

	for (const auto& file : data_) {
Has 2 instructions
Has 1 classes

	if (file.isCatalog()) {
Has 2 instructions
Has 0 classes







	private:
std::string BuildHeader() {
Has 2 instructions
Has 0 classes



	std::string BuildDate() {
Has 6 instructions
Has 0 classes



	std::string BuildTableOfContents() {
Has 6 instructions
Has 1 classes

	 ++f) {
Has 4 instructions
Has 4 classes

	if (file.isCatalog()) {
Has 2 instructions
Has 0 classes



	 ++i) {
Has 2 instructions
Has 0 classes



	if (file.isCatalog()) {
Has 2 instructions
Has 0 classes



	else {
Has 2 instructions
Has 0 classes







	std::string BuildFile(const File& file) {
Has 7 instructions
Has 3 classes

	if (!file.getData().getLibIncludes().empty()) {
Has 3 instructions
Has 1 classes

	for (const auto& line : file.getData().getLibIncludes()) {
Has 2 instructions
Has 0 classes





	if (!file.getData().getProjIncludes().empty()) {
Has 2 instructions
Has 1 classes

	for (const auto& line : file.getData().getProjIncludes()) {
Has 2 instructions
Has 0 classes





	for (const auto& ptr : file.getData().getData()) {
Has 2 instructions
Has 0 classes





	std::string BuildSeparator(const std::string& title) {
Has 5 instructions
Has 1 classes

	if (title.size() < separator_.size()) {
Has 2 instructions
Has 0 classes





]

### ../source/PathInitializer.ut.cpp #######################################
############################################################################
This file summary:
	Files included:  [2]
		PathInitializer.ut.hpp
		plugins/catch.hpp


This file documentation:
[TEST_CASE("PathInitializer: static operations", "[CutoutName], [CutoutFormat], [AppendConditionalSlash]") {
Has 1 instructions
Has 3 classes

	WHEN("Testing the CutoutName()") {
Has 1 instructions
Has 3 classes

	struct test {
Has 3 instructions
Has 1 classes

	std::string log() const {
Has 2 instructions
Has 1 classes

	return
"{
Has 1 instructions
Has 0 classes







	const std::initializer_list<test> tests = {
Has 1 instructions
Has 18 classes

	{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes





	for (const auto& test : tests) {
Has 1 instructions
Has 1 classes

	THEN(test.log()) {
Has 4 instructions
Has 0 classes







	WHEN("Testing the CutoutFormat()") {
Has 1 instructions
Has 3 classes

	struct test {
Has 3 instructions
Has 1 classes

	std::string log() const {
Has 2 instructions
Has 1 classes

	return
"{
Has 1 instructions
Has 0 classes







	const std::initializer_list<test> tests = {
Has 1 instructions
Has 18 classes

	{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes





	for (const auto& test : tests) {
Has 1 instructions
Has 1 classes

	THEN(test.log()) {
Has 4 instructions
Has 0 classes







	WHEN("Testing the AppendConditionalSlash()") {
Has 1 instructions
Has 3 classes

	struct test {
Has 3 instructions
Has 1 classes

	std::string log() const {
Has 2 instructions
Has 1 classes

	return
"{
Has 1 instructions
Has 0 classes







	const std::initializer_list<test> tests = {
Has 1 instructions
Has 18 classes

	{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes





	for (const auto& test : tests) {
Has 1 instructions
Has 1 classes

	THEN(test.log()) {
Has 4 instructions
Has 0 classes







]

### ../source/Program.hpp ##################################################
############################################################################
This file summary:
	Libraries included:  [1]
		<iostream>

	Files included:  [4]
		GeneratorTxt.hpp
		ProgramInitializer.hpp
		ProjectBuilder.hpp
		Tools


This file documentation:
[class Program {
Has 4 instructions
Has 3 classes

	public:
explicit Program(const ProgramInitializer& target):
flagSupport_(target),
targetPath_(target.getPath()),
outputPath_("sup.txt")
{
Has 1 instructions
Has 0 classes



	void execute() {
Has 6 instructions
Has 1 classes

	for (const auto& file : project) {
Has 2 instructions
Has 0 classes





	private:
void initializeIgnoreFiles() {
Has 5 instructions
Has 2 classes

	if (FileIO::fileExist(fileName)) {
Has 4 instructions
Has 0 classes



	else {
Has 3 instructions
Has 0 classes





]

### ../source/ProgramInitializer.hpp #######################################
############################################################################
This file summary:
	Libraries included:  [1]
		<string>

	Files included:  [1]
		Tools


This file documentation:
[/* TODO:
- napisz obsługę flag. -md -markdown -txt -text
- flag supprot
*/
class ProgramInitializer {
Has 4 instructions
Has 4 classes

	public:
explicit ProgramInitializer(const int& argc, const char* const * const argv):
path_(GenPath(argc, argv))
{
Has 1 instructions
Has 0 classes



	std::string getPath() const {
Has 2 instructions
Has 0 classes



	std::string getDefaultPath() const {
Has 2 instructions
Has 0 classes



	private:
std::string GenPath(const int& argc, const char* const * const argv) const {
Has 2 instructions
Has 1 classes

	if (argc > 1) {
Has 2 instructions
Has 0 classes





]

### ../source/ProjectBuilder.hpp ###########################################
############################################################################
This file summary:
	Libraries included:  [2]
		<algorithm>
		<string>

	Files included:  [4]
		DataStructures
		FileBuilder.hpp
		FileDataBuilder.hpp
		Tools


This file documentation:
[class ProjectBuilder {
Has 4 instructions
Has 9 classes

	public:
explicit ProjectBuilder(const std::string& initPath):
initPath_(initPath),
product_(BuildProduct())
{
Has 1 instructions
Has 0 classes



	Project getProduct() const {
Has 2 instructions
Has 0 classes



	private:
Project BuildProduct() const {
Has 4 instructions
Has 0 classes



	Project UpdateProjectWithData(Project& project) const {
Has 2 instructions
Has 1 classes

	for (auto& file : project) {
Has 2 instructions
Has 1 classes

	if (builder.dataExist()) {
Has 2 instructions
Has 0 classes







	Project BuildProductStructure() const {
Has 4 instructions
Has 0 classes



	std::vector<File> BuildRecursive(const std::string& targetPath, int depth) const {
Has 5 instructions
Has 1 classes

	for (const auto& path : paths) {
Has 4 instructions
Has 0 classes





	Project FlatenRecursive(const File& root) const {
Has 4 instructions
Has 1 classes

	for (const auto& file : root.getSubFiles()) {
Has 3 instructions
Has 0 classes





	static bool SortCriterion_CatalogLast(const File& f, const File& s) {
Has 3 instructions
Has 1 classes

	if (test % 2 == 0) {
Has 2 instructions
Has 0 classes





	static bool SortCriterion_Alphabetical(const std::string& f, const std::string& s) {
Has 2 instructions
Has 0 classes



]

### ../source/Tools ########################################################
############################################################################
This file summary:
	Files included:  [3]
		tools/Converter.hpp
		tools/FileIO.hpp
		tools/IgnoreFiles.hpp


This file documentation:
[namespace Tools {
Has 4 instructions
Has 0 classes

]

### ../source/catch_main.cpp ###############################################
############################################################################
This file summary:
	Files included:  [1]
		plugins/catch.hpp


This file documentation:

### ../source/iSyntaxBuilder.hpp ###########################################
############################################################################
This file summary:
	Files included:  [1]
		DataStructures


This file documentation:
[class iSyntaxBuilder {
Has 1 instructions
Has 0 classes

]

### ../source/main.cpp #####################################################
############################################################################
This file summary:
	Libraries included:  [1]
		<iostream>

	Files included:  [2]
		Program.hpp
		ProgramInitializer.hpp


This file documentation:
[int main(int argc, char* argv[]) {
Has 6 instructions
Has 0 classes

]

### ../source/data parsers/CommentParser.ut.cpp ############################
############################################################################
This file summary:
	Libraries included:  [2]
		<algorithm>
		<numeric>

	Files included:  [2]
		CommentsParser.ut.hpp
		plugins/catch.hpp


This file documentation:
[FileParserComments_UnitTest testObject;]
[TEST_CASE("FileParserComments: base operations", "[IsInsideString], [IsAlreadyCommentedByOneline]") {
Has 1 instructions
Has 3 classes

	struct test {
Has 3 instructions
Has 1 classes

	std::string log() const {
Has 2 instructions
Has 1 classes

	return
"{
Has 1 instructions
Has 0 classes







	WHEN("Testing the IsInsideString()") {
Has 1 instructions
Has 2 classes

	const std::initializer_list<test> tests = {
Has 1 instructions
Has 19 classes

	{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes





	for (const auto& test : tests) {
Has 1 instructions
Has 1 classes

	THEN(test.log()) {
Has 4 instructions
Has 0 classes







	WHEN("Testing the IsAlreadyCommentedByOneline()") {
Has 1 instructions
Has 2 classes

	const std::initializer_list<test> tests = {
Has 1 instructions
Has 16 classes

	{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes



	,
{
Has 1 instructions
Has 0 classes





	for (const auto& test : tests) {
Has 1 instructions
Has 1 classes

	THEN(test.log()) {
Has 4 instructions
Has 0 classes







]

### ../source/data parsers/CommentParser.ut.hpp ############################
############################################################################
This file summary:
	Files included:  [1]
		CommentParser.hpp


This file documentation:
[class CommentParser_UnitTest : CommentParser {
Has 1 instructions
Has 6 classes

	public:
CommentParser_UnitTest() {
Has 1 instructions
Has 0 classes



	bool IsInsideString(const Line& line) {
Has 2 instructions
Has 0 classes



	bool IsAlreadyCommentedByOneline(const Line& subline) {
Has 2 instructions
Has 0 classes



	Line RemoveOnelineComments(const Line& line) {
Has 2 instructions
Has 0 classes



	Data RemoveAllOnelineComments(const Data& data) {
Has 2 instructions
Has 0 classes



	Line Multiline_ClearLine(const Line& line, bool& isCommented) {
Has 2 instructions
Has 0 classes



]

### ../source/data parsers/CommentParser.hpp ###############################
############################################################################
This file summary:

This file documentation:
[/* TODO:
- fix multiline comments
ex: abcd *
namespace DataParsers {
Has 1 instructions
Has 1 classes

	class CommentParser {
Has 3 instructions
Has 9 classes

	CommentParser() {
Has 1 instructions
Has 0 classes



	public:
static Data removeComments(Data data) {
Has 4 instructions
Has 0 classes



	protected:
static Data RemoveAllOnelineComments(Data data) {
Has 2 instructions
Has 1 classes

	for (auto& line : data) {
Has 2 instructions
Has 0 classes





	static Line RemoveOnelineComments(const Line& line) {
Has 3 instructions
Has 2 classes

	if (i == std::string::npos) {
Has 2 instructions
Has 0 classes



	if (IsInsideString(line.substr(0, i))) {
Has 2 instructions
Has 0 classes





	static Data RemoveMultilineComments(Data data) {
Has 3 instructions
Has 1 classes

	for (auto& line : data) {
Has 2 instructions
Has 2 classes

	if (isCommented) {
Has 2 instructions
Has 0 classes



	if (begin != std::string::npos) {
Has 2 instructions
Has 0 classes







	static Line Multiline_ClearLine(Line line, bool& isCommented) {
Has 4 instructions
Has 3 classes

	if (end == std::string::npos) {
Has 2 instructions
Has 0 classes



	if (IsAlreadyCommentedByOneline(line.substr(0, end))) {
Has 2 instructions
Has 0 classes



	if (IsInsideString(line.substr(0, end))) {
Has 2 instructions
Has 0 classes





	static Line Multiline_FindClosing(Line line, bool& isCommented, const size_t begin) {
Has 4 instructions
Has 1 classes

	if (end != std::string::npos) {
Has 3 instructions
Has 0 classes





	static bool IsInsideString(const Line& subline) {
Has 4 instructions
Has 0 classes



	static bool IsAlreadyCommentedByOneline(const Line& subline) {
Has 2 instructions
Has 0 classes





]

### ../source/data parsers/DirectiveParser.hpp #############################
############################################################################
This file summary:
	Files included:  [2]
		../DataStructures
		../Tools


This file documentation:
[namespace DataParsers {
Has 1 instructions
Has 1 classes

	class DirectiveParser {
Has 4 instructions
Has 2 classes

	DirectiveParser() {
Has 1 instructions
Has 0 classes



	public:
static Data removeDirectives(Data data) {
Has 2 instructions
Has 1 classes

	for (auto& line : data) {
Has 2 instructions
Has 2 classes

	if (tmp.empty()) {
Has 2 instructions
Has 0 classes



	if (tmp[0] == '#') {
Has 2 instructions
Has 0 classes









]

### ../source/data parsers/IncludeParser.hpp ###############################
############################################################################
This file summary:
	Files included:  [2]
		)
		../DataStructures


This file documentation:
[namespace DataParsers {
Has 1 instructions
Has 1 classes

	class IncludeParser {
Has 7 instructions
Has 6 classes

	public:
IncludeParser(const Data& data):
data_(data),
libIncludes_(),
projIncludes_()
{
Has 2 instructions
Has 0 classes



	Data getLibIncludes() const {
Has 2 instructions
Has 0 classes



	Data getProjIncludes() const {
Has 2 instructions
Has 0 classes



	Data getData() const {
Has 2 instructions
Has 0 classes



	protected:
void BuildIncludes() {
Has 4 instructions
Has 1 classes

	for (auto str : includes) {
Has 1 instructions
Has 3 classes

	if (str.at(0) == '<') {
Has 2 instructions
Has 0 classes



	else if (str.at(0) == '\"') {
Has 2 instructions
Has 0 classes



	else {
Has 2 instructions
Has 0 classes







	Data CutoutIncludes() {
Has 3 instructions
Has 1 classes

	for (auto& line : data_) {
Has 6 instructions
Has 1 classes

	if (i == std::string::npos) {
Has 2 instructions
Has 0 classes









]

### ../source/data parsers/SyntaxParser.hpp ################################
############################################################################
This file summary:
	Libraries included:  [3]
		<algorithm>
		<iostream>
		<stack>

	Files included:  [1]
		../DataStructures


This file documentation:
[namespace DataParsers {
Has 1 instructions
Has 1 classes

	class SyntaxParser {
Has 7 instructions
Has 9 classes

	public:
SyntaxParser(const Data& data):
rawData_(MergeRawData(data)),
product_(BuildProduct())
{
Has 1 instructions
Has 0 classes



	std::string getData() const {
Has 2 instructions
Has 0 classes



	Syntax getProduct() const {
Has 2 instructions
Has 0 classes



	protected:
std::string MergeRawData(const Data& data) const {
Has 2 instructions
Has 0 classes



	Syntax BuildProduct() {
Has 6 instructions
Has 2 classes

	while(i != std::string::npos) {
Has 6 instructions
Has 3 classes

	') {
Has 1 instructions
Has 2 classes

	if (hierarchy.empty()) {
Has 2 instructions
Has 0 classes



	else {
Has 2 instructions
Has 0 classes





	else if (syntaxData[syntaxData.size() - 1] == '{
Has 1 instructions
Has 1 classes

	') {
Has 2 instructions
Has 0 classes





	') {
Has 2 instructions
Has 3 classes

	if (!draft.empty()) {
Has 2 instructions
Has 1 classes

	') {
Has 4 instructions
Has 0 classes





	if (hierarchy.size() < 2) {
Has 2 instructions
Has 1 classes

	if (!hierarchy.empty()) {
Has 2 instructions
Has 0 classes





	else {
Has 4 instructions
Has 0 classes







	/*
while (!hierarchy.empty()) {
Has 3 instructions
Has 0 classes





	size_t ClosestSemicolonOrParenthesis(const Line& line) {
Has 3 instructions
Has 1 classes

	'), line.find('{
Has 1 instructions
Has 0 classes





	bool hasCoolon(const Line& line) {
Has 3 instructions
Has 0 classes



	bool hasO_Bracket(const Line& line) {
Has 2 instructions
Has 2 classes

	return (line.find('{
Has 2 instructions
Has 0 classes



	bool hasC_Bracket(const Line& line) {
Has 1 instructions
Has 0 classes





	std::string RemoveNewLineCharacter( const std::string& line) {
Has 2 instructions
Has 1 classes

	if (line.empty()) {
Has 2 instructions
Has 0 classes







]

### ../source/data structures/Class.hpp ####################################
############################################################################
This file summary:
	Libraries included:  [2]
		<numeric>
		<string>

	Files included:  [1]
		iSyntax.hpp


This file documentation:
[class Class : public iSyntax {
Has 4 instructions
Has 6 classes

	public:
Class(const std::string& data):
header_(data),
subElements_(),
subClasses_()
{
Has 1 instructions
Has 0 classes



	std::string getResult() const override {
Has 4 instructions
Has 1 classes

	for (const auto& element : subClasses_) {
Has 2 instructions
Has 0 classes





	void push_back(const std::shared_ptr<iSyntax>& subElement) {
Has 2 instructions
Has 1 classes

	if (subElement->getSyntaxType() == Type::Class) {
Has 3 instructions
Has 0 classes





	Type getSyntaxType() const override {
Has 2 instructions
Has 0 classes



	private:
size_t CountInstructions() const {
Has 2 instructions
Has 1 classes

	return std::accumulate(subElements_.begin(), subElements_.end(), 0,
[](int sum, auto e){
Has 2 instructions
Has 0 classes





	size_t CountClasses() const {
Has 2 instructions
Has 0 classes



]

### ../source/data structures/File.hpp #####################################
############################################################################
This file summary:
	Libraries included:  [2]
		<string>
		<vector>

	Files included:  [1]
		FileData.hpp


This file documentation:
[class File {
Has 9 instructions
Has 13 classes

	public:
File(
const size_t depth,
const size_t countRecursive,
const std::string& initPath,
const std::string& path,
const std::string& name,
const std::string& format,
const std::vector<File>& subFiles
):
depth_(depth),
countRecursive_(countRecursive),
initPath_(initPath),
path_(path),
name_(name),
format_(format),
subFiles_(subFiles),
data_()
{
Has 1 instructions
Has 0 classes



	std::string getInitPath() const {
Has 2 instructions
Has 0 classes



	std::string getPath() const {
Has 2 instructions
Has 0 classes



	std::string getName() const {
Has 2 instructions
Has 0 classes



	std::string getFormat() const {
Has 2 instructions
Has 0 classes



	std::string getFile() const {
Has 2 instructions
Has 0 classes



	std::vector<File> getSubFiles() const {
Has 2 instructions
Has 0 classes



	bool isCatalog() const {
Has 2 instructions
Has 0 classes



	size_t getDepth() const {
Has 2 instructions
Has 0 classes



	size_t countSubFiles() const {
Has 2 instructions
Has 0 classes



	size_t countSubFilesRecursive() const {
Has 2 instructions
Has 0 classes



	void setData(const FileData& data) {
Has 2 instructions
Has 0 classes



	FileData getData() const {
Has 2 instructions
Has 0 classes



]

### ../source/data structures/FileData.hpp #################################
############################################################################
This file summary:
	Libraries included:  [2]
		<string>
		<vector>

	Files included:  [1]
		iSyntax.hpp


This file documentation:
[class FileData {
Has 4 instructions
Has 5 classes

	public:
FileData():
libIncludes_(),
projIncludes_(),
data_()
{
Has 1 instructions
Has 0 classes



	FileData(
const std::vector<std::string>& libIncludes,
const std::vector<std::string>& projIncludes,
const std::vector<std::shared_ptr<iSyntax>>& data
):
libIncludes_(libIncludes),
projIncludes_(projIncludes),
data_(data)
{
Has 1 instructions
Has 0 classes



	std::vector<std::string> getLibIncludes() const {
Has 2 instructions
Has 0 classes



	std::vector<std::string> getProjIncludes() const {
Has 2 instructions
Has 0 classes



	std::vector<std::shared_ptr<iSyntax>> getData() const {
Has 2 instructions
Has 0 classes



]

### ../source/data structures/Instruction.hpp ##############################
############################################################################
This file summary:
	Libraries included:  [1]
		<string>

	Files included:  [1]
		iSyntax.hpp


This file documentation:
[class Instruction : public iSyntax {
Has 2 instructions
Has 3 classes

	public:
Instruction(const std::string& data): rawData_(data) {
Has 1 instructions
Has 0 classes



	std::string getResult() const override {
Has 2 instructions
Has 0 classes



	Type getSyntaxType() const override {
Has 2 instructions
Has 0 classes



]

### ../source/data structures/iSyntax.hpp ##################################
############################################################################
This file summary:

This file documentation:
[class iSyntax {
Has 3 instructions
Has 3 classes

	public:
enum Type {
Has 1 instructions
Has 0 classes



	enum Memory {
Has 1 instructions
Has 0 classes



	virtual ~iSyntax() {
Has 1 instructions
Has 0 classes



]

### ../source/tools/Converter.hpp ##########################################
############################################################################
This file summary:
	Libraries included:  [4]
		<algorithm>
		<set>
		<sstream>
		<vector>


This file documentation:
[namespace Tools {
Has 1 instructions
Has 1 classes

	class Converter {
Has 1 instructions
Has 11 classes

	public:
template <class T>
static std::set<T> to_set(const std::vector<T>& data) {
Has 2 instructions
Has 0 classes



	static std::string to_fileData(const std::set<std::string>& data) {
Has 4 instructions
Has 1 classes

	std::for_each (data.begin(), data.end(), [&](const auto& val){
Has 2 instructions
Has 0 classes





	static std::string to_string(const std::vector<std::string>& data2) {
Has 5 instructions
Has 1 classes

	std::for_each(data.begin(), data.end(), [&](const auto& line){
Has 2 instructions
Has 0 classes





	static std::string AppendConditionalSlash(std::string str) {
Has 2 instructions
Has 1 classes

	if (!str.empty()) {
Has 2 instructions
Has 0 classes





	static std::vector<std::string> removeWhitespaces(std::vector<std::string> data) {
Has 2 instructions
Has 1 classes

	for (auto& line : data) {
Has 2 instructions
Has 0 classes





	static std::string removeWhitespaces(std::string data) {
Has 6 instructions
Has 0 classes



	static std::vector<std::string> removeEmptyLines(const std::vector<std::string>& data) {
Has 4 instructions
Has 1 classes

	for (auto record : data) {
Has 2 instructions
Has 1 classes

	if (!record.empty()) {
Has 2 instructions
Has 0 classes







	private:
static std::string RemoveSpecialChars(const std::string& data) {
Has 4 instructions
Has 1 classes

	std::for_each(begin(result), end(result),
[](auto& ch){
Has 2 instructions
Has 0 classes





	static std::string RemoveFromBegin(const std::string& data) {
Has 5 instructions
Has 1 classes

	 ++i) {
Has 1 instructions
Has 1 classes

	if (data[i] != ' ') {
Has 2 instructions
Has 0 classes







	static std::string RemoveFromEnd(const std::string& data) {
Has 5 instructions
Has 1 classes

	 --i) {
Has 1 instructions
Has 1 classes

	if (data[i] != ' ') {
Has 2 instructions
Has 0 classes







	static std::string RemoveAdjacentSpaces(const std::string& data) {
Has 6 instructions
Has 1 classes

	 ++i) {
Has 2 instructions
Has 2 classes

	if (!foundSpace) {
Has 4 instructions
Has 0 classes



	if (!foundSpace) {
Has 2 instructions
Has 0 classes









]

### ../source/tools/FileIO.hpp #############################################
############################################################################
This file summary:
	Libraries included:  [5]
		<dirent.h>
		<exception>
		<fstream>
		<string>
		<vector>

	Files included:  [1]
		IgnoreFiles.hpp


This file documentation:
[namespace Tools {
Has 1 instructions
Has 1 classes

	class FileIO {
Has 1 instructions
Has 5 classes

	explicit FileIO() {
Has 1 instructions
Has 0 classes



	public:
static bool fileExist(const std::string& path) {
Has 4 instructions
Has 1 classes

	if (!readFile || !readFile.is_open()) {
Has 3 instructions
Has 0 classes





	static std::vector<std::string> readPaths(const std::string& targetPath) {
Has 7 instructions
Has 2 classes

	if (!directory) {
Has 2 instructions
Has 0 classes



	while ((entry = readdir(directory)) != NULL) {
Has 3 instructions
Has 1 classes

	if (IgnoreFiles::isIgnored(data)) {
Has 2 instructions
Has 0 classes







	static std::vector<std::string> readFile(const std::string& path) {
Has 6 instructions
Has 2 classes

	if (!readFile || !readFile.is_open()) {
Has 2 instructions
Has 0 classes



	while (std::getline(readFile, record)) {
Has 2 instructions
Has 0 classes





	static void saveToFile(const std::string& path, const std::string& data) {
Has 4 instructions
Has 1 classes

	if (!output || !output.is_open()) {
Has 2 instructions
Has 0 classes







]

### ../source/tools/IgnoreFiles.cpp ########################################
############################################################################
This file summary:
	Libraries included:  [2]
		<string>
		<vector>

	Files included:  [1]
		IgnoreFiles.hpp


This file documentation:
[namespace Tools {
Has 2 instructions
Has 3 classes

	const std::set<std::string> IgnoreFiles::formatIgnores_ {
Has 1 instructions
Has 0 classes



	const std::set<std::string> IgnoreFiles::alwaysIgnores_ {
Has 1 instructions
Has 0 classes



	std::set<std::string> IgnoreFiles::defaultIgnores_ {
Has 1 instructions
Has 0 classes



]

### ../source/tools/IgnoreFiles.hpp ########################################
############################################################################
This file summary:
	Libraries included:  [4]
		<algorithm>
		<set>
		<string>
		<vector>


This file documentation:
[namespace Tools {
Has 1 instructions
Has 1 classes

	class IgnoreFiles {
Has 6 instructions
Has 8 classes

	explicit IgnoreFiles() {
Has 1 instructions
Has 0 classes



	public:
static void setIgnoreFiles(const std::set<std::string>& data) {
Has 2 instructions
Has 0 classes



	static std::string getIgnoreFileName() {
Has 2 instructions
Has 0 classes



	static std::set<std::string> getDefaultIgnoreFiles() {
Has 2 instructions
Has 0 classes



	static bool isAlwaysIgnored(const std::string& value) {
Has 2 instructions
Has 0 classes



	static bool isFormatIgnored(const std::string& format) {
Has 2 instructions
Has 0 classes



	static bool isIgnored(const std::string& value) {
Has 2 instructions
Has 2 classes

	if (isAlwaysIgnored(value)) {
Has 2 instructions
Has 0 classes



	if (isFormatIgnored(value)) {
Has 2 instructions
Has 0 classes





	static std::vector<std::string> pickoutAlwaysIgnored(const std::vector<std::string>& vctr) {
Has 5 instructions
Has 1 classes

	std::copy_if(vctr.begin(), vctr.end(), result.begin(), [](auto val){
Has 2 instructions
Has 0 classes







]

