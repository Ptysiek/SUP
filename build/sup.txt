Author of SUP-SeeYourPoint: Kacu Kacper Kaleta [https://github.com/Ptysiek]
File generation date:  Mon Mar  8 00:54:45 2021


### Table Of Contents: #####################################################
############################################################################

	[source/]
		DataParsers
		DataStructures
		FileBuilder.hpp
		FileDataBuilder.hpp
		GeneratorTxt.hpp
		Program.hpp
		ProgramInitializer.hpp
		ProjectBuilder.hpp
		Tools
		main.cpp

		[source/data parsers/]
			CommentParser.hpp
			DirectiveParser.hpp
			IncludeParser.hpp
			SyntaxParser.hpp

		[source/data structures/]
			Block.hpp
			ClassStruct.hpp
			File.hpp
			FileData.hpp
			Instruction.hpp
			Namespace.hpp
			Operation.hpp
			SyntaxTypes
			iSyntax.hpp

		[source/tools/]
			Converter.hpp
			FileIO.hpp
			IgnoreFiles.cpp
			IgnoreFiles.hpp




### ../source/DataParsers ##################################################
############################################################################
File includes:
	Files included:
		 1] data parsers/CommentParser.hpp
		 2] data parsers/DirectiveParser.hpp
		 3] data parsers/IncludeParser.hpp
		 4] data parsers/SyntaxParser.hpp


File content:
	Namespace `DataParsers` {
		class CommentParser;
		class IncludeParser;
		class SyntaxParser;
		class DirectiveParser;
	};




### ../source/DataStructures ###############################################
############################################################################
File includes:
	Libraries included:
		 1] <memory>
		 2] <string>
		 3] <vector>

	Files included:
		 1] data structures/Block.hpp
		 2] data structures/ClassStruct.hpp
		 3] data structures/File.hpp
		 4] data structures/FileData.hpp
		 5] data structures/Instruction.hpp
		 6] data structures/Namespace.hpp
		 7] data structures/Operation.hpp
		 8] data structures/SyntaxTypes
		 9] data structures/iSyntax.hpp


File content:
	Namespace `DataStructures` {
		using Line = std::string;
		using Data = std::vector<std::string>;
		using Project = std::vector<File>;
		using Syntax = std::shared_ptr<iSyntax>;
		using BlockSyntax = std::shared_ptr<Block>;
		using Syntaxes = std::vector<Syntax>;
	};




### ../source/FileBuilder.hpp ##############################################
############################################################################
File includes:
	Libraries included:
		 1] <string>

	Files included:
		 1] DataStructures
		 2] Tools


File content:
	class `FileBuilder` {

		class private fields:
			1] using IgnoreFiles = Tools::IgnoreFiles;
			2] using Converter = Tools::Converter;
			3] const std::string initPath_;
			4] const std::string path_;
			5] const std::string name_;
			6] const std::string format_;
			7] const File product_;

		class public operations:
			1] explicit FileBuilder( const std::string& initPath, const std::string& path, const std::string& fullName, const std::vector<File>& subfiles, const size_t depth )
			2] File getProduct()
			3] static File buildRoot(const std::string& initPath, const std::vector<File>& subFiles)

		class protected operations:
			1] File BuildProduct(const std::vector<File>& subFiles, size_t depth)
			2] static size_t CountRecursive(const std::vector<File>& subFiles)
			3] std::string BuildName(const std::string& str, const bool isEmpty)
			4] std::string CutoutName(const std::string& str)
			5] std::string CutoutFormat(const std::string& str)
	};




### ../source/FileDataBuilder.hpp ##########################################
############################################################################
File includes:
	Files included:
		 1] DataParsers
		 2] DataStructures
		 3] Tools


File content:
	class `FileDataBuilder` {

		class private fields:
			1] using FileIO = Tools::FileIO;
			2] using Converter = Tools::Converter;
			3] using Data = DataStructures::Data;
			4] bool productExist_;
			5] Data rawData_;
			6] const File& fileHeader_;
			7] const FileData product_;
			8] std::vector<std::string> libIncludes_;
			9] std::vector<std::string> projIncludes_;

		class public operations:
			1] FileDataBuilder(const File& file)
			2] bool dataExist()
			3] FileData getProduct()

		class private operations:
			1] FileData BuildProduct()
			2] FileData BuildEmptyData()
			3] Data PrepareData(Data rawData)
	};




### ../source/GeneratorTxt.hpp #############################################
############################################################################
File includes:
	Libraries included:
		 1] <chrono>
		 2] <sstream>

	Files included:
		 1] DataStructures
		 2] Tools


File content:
	class `GeneratorTxt` {

		class private fields:
			1] using IgnoreFiles = Tools::IgnoreFiles;
			2] const std::string separator_;
			3] const std::string targetPath_;
			4] std::vector<File> data_;

		class public operations:
			1] explicit GeneratorTxt(const std::string& targetPath, const std::vector<File>& data)
			2] std::string buildFile()
			3] std::string BuildFileSummary(const File& file)
			4] std::string BuildSeparator(const std::string& title)

		class private operations:
			1] std::string BuildHeader()
			2] std::string BuildDate()
			3] std::string BuildTableOfContents()
			4] std::string BuildFile(const File& file)
			5] std::string BuildFileContent(const File& file)
	};




### ../source/Program.hpp ##################################################
############################################################################
File includes:
	Libraries included:
		 1] <iostream>

	Files included:
		 1] GeneratorTxt.hpp
		 2] ProgramInitializer.hpp
		 3] ProjectBuilder.hpp
		 4] Tools


File content:
	class `Program` {

		class private fields:
			1] const ProgramInitializer flagSupport_;
			2] const std::string targetPath_;
			3] const std::string outputPath_;

		class public operations:
			1] explicit Program(const ProgramInitializer& target)
			2] void execute()

		class private operations:
			1] void initializeIgnoreFiles()
	};




### ../source/ProgramInitializer.hpp #######################################
############################################################################
File includes:
	Libraries included:
		 1] <string>

	Files included:
		 1] Tools


File content:
	class `ProgramInitializer` {

		class private fields:
			1] using IgnoreFiles = Tools::IgnoreFiles;
			2] using Converter = Tools::Converter;
			3] const std::string path_;

		class public operations:
			1] explicit ProgramInitializer(const int& argc, const char* const * const argv)
			2] std::string getPath()
			3] std::string getDefaultPath()

		class private operations:
			1] std::string GenPath(const int& argc, const char* const * const argv)
	};




### ../source/ProjectBuilder.hpp ###########################################
############################################################################
File includes:
	Libraries included:
		 1] <algorithm>
		 2] <string>

	Files included:
		 1] DataStructures
		 2] FileBuilder.hpp
		 3] FileDataBuilder.hpp
		 4] Tools


File content:
	class `ProjectBuilder` {

		class private fields:
			1] using Project = DataStructures::Project;
			2] const std::string initPath_;
			3] const Project product_;

		class public operations:
			1] explicit ProjectBuilder(const std::string& initPath)
			2] Project getProduct()

		class private operations:
			1] Project BuildProduct()
			2] Project UpdateProjectWithData(Project& project)
			3] Project BuildProductStructure()
			4] std::vector<File> BuildRecursive(const std::string& targetPath, int depth)
			5] Project FlatenRecursive(const File& root)
			6] static bool SortCriterion_CatalogLast(const File& f, const File& s)
			7] static bool SortCriterion_Alphabetical(const std::string& f, const std::string& s)
	};




### ../source/Tools ########################################################
############################################################################
File includes:
	Files included:
		 1] tools/Converter.hpp
		 2] tools/FileIO.hpp
		 3] tools/IgnoreFiles.hpp


File content:
	Namespace `Tools` {
		class Converter;
		class FileIO;
		class IgnoreFiles;
	};




### ../source/main.cpp #####################################################
############################################################################
File includes:
	Libraries included:
		 1] <iostream>

	Files included:
		 1] Program.hpp
		 2] ProgramInitializer.hpp


File content:
	int main(int argc, char* argv[]) {




### ../source/data parsers/CommentParser.hpp ###############################
############################################################################
File includes:

File content:
	Namespace `DataParsers` {
		class `CommentParser` {

			class protected fields:
				1] using Data = DataStructures::Data;
				2] using Line = DataStructures::Line;

			class public operations:
				1] static Data removeComments(Data data)

			class protected operations:
				1] CommentParser()
				2] static Data RemoveAllOnelineComments(Data data)
				3] static Line RemoveOnelineComments(const Line& line)
				4] static Data RemoveMultilineComments(Data data)
				5] static Line Multiline_ClearLine(Line line, bool& isCommented)
				6] static Line Multiline_FindClosing(Line line, bool& isCommented, const size_t begin)
				7] static bool IsInsideString(const Line& subline)
				8] static bool IsAlreadyCommentedByOneline(const Line& subline)
		};
	};




### ../source/data parsers/DirectiveParser.hpp #############################
############################################################################
File includes:
	Files included:
		 1] ../DataStructures
		 2] ../Tools


File content:
	Namespace `DataParsers` {
		class `DirectiveParser` {

			class protected fields:
				1] using Converter = Tools::Converter;
				2] using Data = DataStructures::Data;
				3] using Line = DataStructures::Line;

			class public operations:
				1] static Data removeDirectives(Data data)

			class protected operations:
				1] DirectiveParser()
		};
	};




### ../source/data parsers/IncludeParser.hpp ###############################
############################################################################
File includes:
	Files included:
		 1] )
		 2] ../DataStructures


File content:
	Namespace `DataParsers` {
		class `IncludeParser` {

			class private fields:
				1] using Converter = Tools::Converter;
				2] using Data = DataStructures::Data;
				3] using Line = DataStructures::Line;
				4] Data data_;
				5] Data libIncludes_;
				6] Data projIncludes_;

			class public operations:
				1] IncludeParser(const Data& data)
				2] Data getLibIncludes()
				3] Data getProjIncludes()
				4] Data getData()

			class protected operations:
				1] void BuildIncludes()
				2] Data CutoutIncludes()
		};
	};




### ../source/data parsers/SyntaxParser.hpp ################################
############################################################################
File includes:
	Libraries included:
		 1] <algorithm>
		 2] <iostream>
		 3] <stack>

	Files included:
		 1] ../DataStructures


File content:
	Namespace `DataParsers` {
		class `SyntaxParser` {

			class private fields:
				1] using Converter = Tools::Converter;
				2] using Access = SyntaxTypes::Access;
				3] using Data = DataStructures::Data;
				4] using Line = DataStructures::Line;
				5] using Syntax = DataStructures::Syntax;
				6] using Syntaxes = DataStructures::Syntaxes;
				7] using BlockSyntax = DataStructures::BlockSyntax;

			class public fields:
				1] SyntaxTypes::Access currentAccess_;
				2] const std::string rawData_;
				3] const Syntaxes product_;

			class public operations:
				1] SyntaxParser(const Data& data)
				2] Syntaxes getProduct()
				3] void AddBlockOpen(Workspace& w)
				4] void AddBlockClose(Workspace& w)
				5] BlockSyntax buildBlock(std::string syntaxData)
				6] SyntaxTypes::Access IndicateCurrentAccess(Workspace& w)

			class protected operations:
				1] bool LastCharEquals(const char ch, const std::string& str)
				2] size_t ClosestSemicolonOrParenthesis(const Line& line)
				3] static std::string CutOutTemplate(std::string& syntaxData)
				4] std::string MergeRawData(const Data& data)
				5] void AppendSemicolon(std::string& syntaxData, std::string& draft)
				6] std::string RemoveNewLineCharacter( const std::string& line)

			class private operations:
				1] Syntaxes BuildProduct()
				2] void BuildSingleSyntax(Workspace& w)

			struct `Workspace` {

				struct public fields:
					1] Syntaxes result_;
					2] std::stack<std::shared_ptr<Block>> hierarchy_;
					3] std::string draft_;
					4] std::string syntaxData_;

				struct public operations:
					1] Workspace(const std::string& rawData)
			};

			struct `ion(Workspace& w)` {

				struct public fields:
					1] w.hierarchy_.top()
					2] }

				struct public operations:
					1] if (w.hierarchy_.empty()
			};

			struct `ion(const std::string& syntaxData)` {

				struct public fields:
					1] return std::make_shared<Instruction>(currentAccess_, syntaxData)
					2] }
			};
		};
	};




### ../source/data structures/Block.hpp ####################################
############################################################################
File includes:
	Libraries included:
		 1] <numeric>
		 2] <string>

	Files included:
		 1] SyntaxTypes
		 2] iSyntax.hpp


File content:
	class `Block : public iSyntax` {

		class protected fields:
			1] using SyntaxPtr = std::shared_ptr<iSyntax>;
			2] using iSyntaxes = std::vector<std::shared_ptr<iSyntax>>;
			3] using Converter = Tools::Converter;
			4] const Access access_;
			5] std::string template_;
			6] iSyntaxes subClasses_;
			7] iSyntaxes fields_;
			8] iSyntaxes operations_;
			9] iSyntaxes elements_;

		class public operations:
			1] Block(const Access& access, const std::string& tem)
			2] Type getSyntaxType()
			3] Access getSyntaxAccess()
			4] void emplace_back(const SyntaxPtr& subElement)

		class protected operations:
			1] iSyntaxes GetSyntaxesWithinAccess(const Access access, const iSyntaxes& source)
			2] std::string BuildHeaderName(std::string header, const std::string& key)
	};




### ../source/data structures/ClassStruct.hpp ##############################
############################################################################
File includes:
	Libraries included:
		 1] <sstream>
		 2] <string>

	Files included:
		 1] ../Tools
		 2] Block.hpp
		 3] SyntaxTypes
		 4] iSyntax.hpp


File content:
	class `ClassStruct : public Block` {

		class private fields:
			1] using Converter = Tools::Converter;
			2] using Access = SyntaxTypes::Access;
			3] using SyntaxData = std::vector<std::string>;
			4] const std::string typeName_;
			5] const std::string headerName_;
			6] return result;
			7] }

		class private operations:
			1] Type getSyntaxType()
			2] std::string getResult(size_t tabs = 0)
			3] std::string EnlistSubClasses(const size_t tabs)
			4] std::string EnlistFields(const std::string& tab)
			5] std::string EnlistOperations(const std::string& tab)
			6] std::string BuildEnlistedData( const Access access, const iSyntaxes& syntaxes, const std::string& tab, const std::string& title)
			7] SyntaxData ClearSyntaxData(const iSyntaxes& syntaxes)

		class `"), headerName_(BuildHeaderName(headerData, typeName_))` {

			class private fields:
				1] }
		};
	};
	std::string EnlistSyntaxes(const SyntaxData& syntaxes, const std::string& tab) const {
	std::string BuildOperation(std::string data) const {




### ../source/data structures/File.hpp #####################################
############################################################################
File includes:
	Libraries included:
		 1] <string>
		 2] <vector>

	Files included:
		 1] FileData.hpp


File content:
	class `File` {

		class private fields:
			1] size_t depth_;
			2] size_t countRecursive_;
			3] std::string initPath_;
			4] std::string path_;
			5] std::string name_;
			6] std::string format_;
			7] std::vector<File> subFiles_;
			8] FileData data_;

		class public operations:
			1] File( const size_t depth, const size_t countRecursive, const std::string& initPath, const std::string& path, const std::string& name, const std::string& format, const std::vector<File>& subFiles )
			2] std::string getInitPath()
			3] std::string getPath()
			4] std::string getName()
			5] std::string getFormat()
			6] std::string getFile()
			7] std::vector<File> getSubFiles()
			8] bool isCatalog()
			9] size_t getDepth()
			10] size_t countSubFiles()
			11] size_t countSubFilesRecursive()
			12] void setData(const FileData& data)
			13] FileData getData()
	};




### ../source/data structures/FileData.hpp #################################
############################################################################
File includes:
	Libraries included:
		 1] <numeric>
		 2] <string>
		 3] <vector>

	Files included:
		 1] SyntaxTypes
		 2] iSyntax.hpp


File content:
	class `FileData` {

		class private fields:
			1] using Type = SyntaxTypes::Type;
			2] std::vector<std::string> libIncludes_;
			3] std::vector<std::string> projIncludes_;
			4] std::vector<std::shared_ptr<iSyntax>> data_;

		class public operations:
			1] FileData()
			2] FileData( const std::vector<std::string>& libIncludes, const std::vector<std::string>& projIncludes, const std::vector<std::shared_ptr<iSyntax>>& data )
			3] std::vector<std::string> getLibIncludes()
			4] std::vector<std::string> getProjIncludes()
			5] std::vector<std::shared_ptr<iSyntax>> getData()
			6] size_t CountClasses()

		struct `ions() const` {

			struct public fields:
				1] )
				2] }

			struct public operations:
				1] return std::accumulate(data_.begin()
		};
	};




### ../source/data structures/Instruction.hpp ##############################
############################################################################
File includes:
	Libraries included:
		 1] <string>

	Files included:
		 1] iSyntax.hpp


File content:
	class `Instruction : public iSyntax` {

		class private fields:
			1] const Access access_;
			2] const std::string rawData_;

		class public operations:
			1] Type getSyntaxType()
			2] Access getSyntaxAccess()
			3] std::string getResult(size_t tabs = 0)

		struct `ion(const Access access, const std::string& data): access_(access), rawData_(data)` {

			struct public fields:
				1] }
		};
	};




### ../source/data structures/Namespace.hpp ################################
############################################################################
File includes:
	Libraries included:
		 1] <numeric>
		 2] <sstream>
		 3] <string>

	Files included:
		 1] ../Tools
		 2] Block.hpp
		 3] iSyntax.hpp


File content:
	class `Namespace : public Block` {

		class private fields:
			1] const std::string header_;

		class public fields:
			1] ";
			2] return result.str()
			3] }

		class public operations:
			1] Type getSyntaxType()
			2] std::string getResult(size_t tabs = 0)
	};




### ../source/data structures/Operation.hpp ################################
############################################################################
File includes:
	Libraries included:
		 1] <numeric>
		 2] <string>

	Files included:
		 1] Block.hpp
		 2] iSyntax.hpp


File content:
	class `Operation : public Block` {

		class private fields:
			1] const std::string header_;

		class public operations:
			1] Operation(const Access& access, const std::string& templateData, const std::string& headerData)
			2] Type getSyntaxType()
			3] std::string getResult(size_t tabs = 0)
	};




### ../source/data structures/SyntaxTypes ##################################
############################################################################
File includes:

File content:
	Namespace `SyntaxTypes` {
		enum Type {
		enum Access {
	};




### ../source/data structures/iSyntax.hpp ##################################
############################################################################
File includes:
	Files included:
		 1] SyntaxTypes


File content:
	class `iSyntax` {

		class protected fields:
			1] using Type = SyntaxTypes::Type;
			2] using Access = SyntaxTypes::Access;

		class public fields:
			1] virtual Type getSyntaxType()
			2] virtual Access getSyntaxAccess()
			3] virtual std::string getResult(size_t = 0)

		class public operations:
			1] virtual ~iSyntax()
	};




### ../source/tools/Converter.hpp ##########################################
############################################################################
File includes:
	Libraries included:
		 1] <algorithm>
		 2] <set>
		 3] <sstream>
		 4] <vector>


File content:
	Namespace `Tools` {
		class `Converter` {

			class public operations:
				1] static std::set<T> to_set(const std::vector<T>& data)
				2] static std::string to_fileData(const std::set<std::string>& data)
				3] static std::string to_string(const std::vector<std::string>& data2)
				4] static std::string AppendConditionalSlash(std::string str)
				5] static std::vector<std::string> removeWhitespaces(std::vector<std::string> data)
				6] static std::string removeWhitespaces(std::string data)
				7] static std::vector<std::string> removeEmptyLines(const std::vector<std::string>& data)

			class private operations:
				1] static std::string RemoveSpecialChars(const std::string& data)
				2] static std::string RemoveFromBegin(const std::string& data)
				3] static std::string RemoveFromEnd(const std::string& data)
				4] static std::string RemoveAdjacentSpaces(const std::string& data)
		};
	};




### ../source/tools/FileIO.hpp #############################################
############################################################################
File includes:
	Libraries included:
		 1] <dirent.h>
		 2] <exception>
		 3] <fstream>
		 4] <string>
		 5] <vector>

	Files included:
		 1] IgnoreFiles.hpp


File content:
	Namespace `Tools` {
		class `FileIO` {

			class public operations:
				1] static bool fileExist(const std::string& path)
				2] static std::vector<std::string> readPaths(const std::string& targetPath)
				3] static std::vector<std::string> readFile(const std::string& path)
				4] static void saveToFile(const std::string& path, const std::string& data)

			class private operations:
				1] explicit FileIO()
		};
	};




### ../source/tools/IgnoreFiles.cpp ########################################
############################################################################
File includes:
	Libraries included:
		 1] <string>
		 2] <vector>

	Files included:
		 1] IgnoreFiles.hpp


File content:
	Namespace `Tools` {
		const std::string IgnoreFiles::filename_ = ".supignore";
		const std::set<std::string> IgnoreFiles::formatIgnores_ {
		const std::set<std::string> IgnoreFiles::alwaysIgnores_ {
		std::set<std::string> IgnoreFiles::defaultIgnores_ {
	};




### ../source/tools/IgnoreFiles.hpp ########################################
############################################################################
File includes:
	Libraries included:
		 1] <algorithm>
		 2] <set>
		 3] <string>
		 4] <vector>


File content:
	Namespace `Tools` {
		class `IgnoreFiles` {

			class private fields:
				1] const static std::string filename_;
				2] const static std::set<std::string> alwaysIgnores_;
				3] const static std::set<std::string> formatIgnores_;
				4] static std::set<std::string> defaultIgnores_;
				5] static std::set<std::string> ignored_;

			class public operations:
				1] static void setIgnoreFiles(const std::set<std::string>& data)
				2] static std::string getIgnoreFileName()
				3] static std::set<std::string> getDefaultIgnoreFiles()
				4] static bool isAlwaysIgnored(const std::string& value)
				5] static bool isFormatIgnored(const std::string& format)
				6] static bool isIgnored(const std::string& value)
				7] static std::vector<std::string> pickoutAlwaysIgnored(const std::vector<std::string>& vctr)

			class private operations:
				1] explicit IgnoreFiles()
		};
	};




