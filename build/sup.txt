Author of SUP-SeeYourPoint: Kacu Kacper Kaleta [https://github.com/Ptysiek]
File generation date: Mon Jan 18 06:00:25 2021


_____________________________________________
Table of contents:   ------------------------
	[source]
	|	DefaultFileReader.hpp
	|	DirectoriesReader.hpp
	|	DirectoriesReader.ut.cpp
	|	DirectoriesReader.ut.hpp
	|	DocumentationGenerator.hpp
	|	File.hpp
	|	IgnoreFileReader.hpp
	|	StateMachine.hpp
	|	catch_main.cpp
	|	main.cpp
	


class DefaultFileReader {
protected:
const static std::string filename_;
const static std::string defaultStartPath_;
static std::string programStartPath_;
explicit DefaultFileReader() { }
public:
static std::string getStartPath() {
std::ifstream readFile(filename_);
if (!readFile || !readFile.is_open()) {
GenerateDefaultFile();
return defaultStartPath_;
}
std::string record;
std::getline(readFile, record);
readFile.close();   
programStartPath_ = record;
return record;
}
private: 
static void GenerateDefaultFile() {
std::ofstream output(filename_);
if (!output || !output.is_open()) {
throw std::logic_error("DefaultFileReader::GenerateDefaultFile() Failed to generate");
}
output << programStartPath_;
output.close();
}
};
const std::string DefaultFileReader::filename_ = ".supDefaultPath";
const std::string DefaultFileReader::defaultStartPath_ = "../";
std::string DefaultFileReader::programStartPath_ = defaultStartPath_;
------------------------
------------------------




class DirectoriesReader {
protected:
std::set<std::string> ignoreDirectories_;
public:
explicit DirectoriesReader(): ignoreDirectories_() { }
explicit DirectoriesReader(const std::set<std::string>& ignoreDirs): ignoreDirectories_(ignoreDirs) { }
std::vector<File> getDirectories(const std::string& startpath) {
return GetDirectoriesRecursive(startpath);
}
std::vector<File> getDirectories(const std::string& startpath, const std::set<std::string>& ignoreDirs) {
setIgnoreDirectories(ignoreDirs);
return GetDirectoriesRecursive(startpath);
}
void setIgnoreDirectories(const std::set<std::string>& ignoreDirs) { ignoreDirectories_ = ignoreDirs; }
private:
std::vector<File> GetDirectoriesRecursive(std::string startpath) {
startpath = ConditionalSlashAppend(startpath);
auto directoryNames = ReadDirectories(startpath);
auto files = MakeFiles(directoryNames, startpath);
for (auto& file : files) {
auto subdirectories = GetDirectoriesRecursive(startpath + file.name_);
if (subdirectories.size() > 0) {
file.isCatalog_ = true;
file.files_ = subdirectories;
}
}
return files;
}
std::vector<std::string> ReadDirectories(const std::string& path) {
std::vector<std::string> directoryNames;
DIR* directory;
directory = opendir(path.c_str());
if (!directory) {
return directoryNames;
}
struct dirent* entry;
while ((entry = readdir(directory)) != NULL) {
std::string data = entry->d_name;
if (IgnoreListContains(data)) {
continue;
}
directoryNames.push_back(data);
}
closedir(directory);
return directoryNames;
}
protected:
std::string ConditionalSlashAppend(const std::string& startpath) {
if (size_t size = startpath.size(); size > 0) {
return (startpath[size-1] == '/')? startpath : startpath + '/';
}
throw std::logic_error("DirectoriesReader::ConditionalSlashAppend() startpath is empty");
}
std::string RemoveSlashOnEnd(const std::string& dirname) {
if (dirname.size() == 0) {
return dirname;
}
std::string directoryName = "";
size_t dirname_size = dirname.size()-1;
for (size_t i = 0; i < dirname_size; ++i) {
directoryName += dirname[i];
}
if (dirname[dirname_size] != '/') {
directoryName += dirname[dirname_size];
}
return directoryName;
}
bool IgnoreListContains(const std::string& data) {
return (ignoreDirectories_.find(data) != ignoreDirectories_.end());
}
File MakeFile(const std::string& dirname, const std::string& startpath) {
const std::string directoryName = RemoveSlashOnEnd(dirname);
TestDirname(directoryName);
return File(directoryName, ConditionalSlashAppend(startpath));
}
void TestDirname(const std::string& dirname) {
if (dirname.empty()) {
throw std::logic_error("DirectoriesReader::MakeFile()::TestDirname() directoryName is empty");
}
for (size_t i = 1; i < dirname.size(); ++i) {
if (dirname[i - 1] == '/' && dirname[i] == '/') {
throw std::logic_error("DirectoriesReader::MakeFile()::TestDirname() double slash");
}
}
if (dirname == ".." || dirname == "../" || dirname == "." || dirname == "./") {
throw std::logic_error("DirectoriesReader::MakeFile()::TestDirname() given navigation directory");
}
}
std::vector<File> MakeFiles(
const std::vector<std::string>& directoryNames, 
const std::string& startpath) 
{
std::vector<File> files;
for (const auto& dirname : directoryNames) {
files.push_back(MakeFile(dirname, startpath)); 
}
return files;
}
};
------------------------
------------------------




TEST_CASE("DirectoriesReader: Helper Functions", "[conditionalSlashAppend], [removeSlashOnEnd]") {
WHEN("Testing the conditionalSlashAppend() operation") {
struct test {
const std::string startpath_;
const std::string result_;
std::string log() const {
return 
"{ (\"" + startpath_ + 
"\") == \"" + result_ +
"\" }";
}
};
const std::initializer_list<test> tests = {
{"abcd", "abcd/"},
{"a", "a/"},
{"abcd/", "abcd/"},
{"a/", "a/"},
{"/", "/"},
{"ab/cd", "ab/cd/"},
{"ab/cd/", "ab/cd/"},
{"/ab/cd", "/ab/cd/"},
{"/ab/cd/", "/ab/cd/"},
{"/abcd", "/abcd/"},
{"/abcd/", "/abcd/"},
{"/a", "/a/"},
{"/a/", "/a/"},
{"
{"
{"..", "../"},
{"../", "../"},
{".", "./"},
{"./", "./"}
};
DirectoriesReader_test testedClass;
for (const auto& test : tests) {
THEN(test.log()) {
std::string first_result;
REQUIRE_NOTHROW(first_result = testedClass.conditionalSlashAppend(test.startpath_));
const auto sec_result = testedClass.conditionalSlashAppend(test.startpath_);
REQUIRE(first_result == sec_result);
REQUIRE(first_result == test.result_);
}
}
const std::initializer_list<test> bad_tests = {
{"", ""},
{"", "/"},
{"", "abcd"},
{"", "abcd/"},
{std::string(), std::string()},
{std::string(), ""},
{std::string(), "/"},
{std::string(), "abcd"},
{std::string(), "abcd/"}
};
for (const auto& test : bad_tests) {
THEN(test.log()) {
REQUIRE_THROWS(testedClass.conditionalSlashAppend(test.startpath_));
}
}
}
WHEN("Testing the removeSlashOnEnd() operation") {
struct test {
const std::string dirname_;
const std::string result_directoryName_;
std::string log() const {
return 
"{ (\"" + dirname_  
+ "\") == \"" + result_directoryName_
+ "\" }";
}
};
const std::initializer_list<test> tests = {
{"abcd", "abcd"},
{"abcd/", "abcd"},
{"a", "a"},
{"a/", "a"},
{"", ""},
{"/", ""},
{std::string(), std::string()}
};
DirectoriesReader_test testedClass;
for (const auto& test : tests) {
THEN(test.log()) {
REQUIRE_NOTHROW(testedClass.removeSlashOnEnd(test.dirname_));
REQUIRE(testedClass.removeSlashOnEnd(test.dirname_) == test.result_directoryName_);
}
}
}
}
TEST_CASE("DirectoriesReader: IgnoreList Functions", "[setIgnoreList], [ignoreListContains]") {
const std::initializer_list<std::string> set_list_data = {
"\n",
"",
" ",
".",
"..",
".git",
".gitignore",
"notes",
"build",
"README.md",
"CMakeLists.txt"
};
WHEN("Testing the setIgnoreList() operation") {
DirectoriesReader_test testedClass;
REQUIRE_NOTHROW(testedClass.setIgnoreDirectories(set_list_data));
REQUIRE(testedClass.getIgnoreListSize() == set_list_data.size());
testedClass.setIgnoreDirectories(set_list_data);
REQUIRE(testedClass.getIgnoreList() == std::set<std::string>(set_list_data));
}
WHEN("Testing the ignoreListContains() operation") {
DirectoriesReader_test testedClass;
testedClass.setIgnoreDirectories(set_list_data);
for (const auto& directory : set_list_data) {
REQUIRE_NOTHROW(testedClass.ignoreListContains(directory));
REQUIRE(testedClass.ignoreListContains(directory) == true);
}
for (const auto& directory : set_list_data) {
for (size_t i = 0; i < 10; ++i) {
char character = static_cast<char>(i);
THEN("\"" + directory + "\" + \"" + character + "\" == false") {
REQUIRE_NOTHROW(testedClass.ignoreListContains(directory + character));
REQUIRE(testedClass.ignoreListContains(directory + character) == false);
}
}
}
}
WHEN("Testing the ignoreListContains() operation with general data") {
struct test {
const std::string directory_;
const bool result_;
std::string log() const {
return 
"{ (\"" + directory_ + 
"\") == \"" + ((result_)? "true" : "false") +
"\" }";
}
};
const std::initializer_list<test> tests = {
{"", true},
{std::string(), true}
};
DirectoriesReader_test testedClass;
testedClass.setIgnoreDirectories(set_list_data);
for (const auto& test : tests) {
THEN(test.log()) {
REQUIRE_NOTHROW(testedClass.ignoreListContains(test.directory_));
REQUIRE(testedClass.ignoreListContains(test.directory_) == test.result_);
}
}
}
}
TEST_CASE("DirectoriesReader: MakeFile Functions", "[makeFile]") {
WHEN("Testing the makeFile() operation") {
struct test {
const std::string dirName_;
const std::string startpath_;
const std::string result_name_;
const std::string result_path_;
const std::string result_fullname_;
std::string log() const {
return 
"{ (\"" + dirName_ + 
"\", \"" + startpath_ +
"\") == (\"" + result_name_ +
"\", \"" + result_path_ +
"\", \"" + result_fullname_ +
"\") }"; 
} 
};
const std::initializer_list<test> tests = {
{"abcd", "efg/",    "abcd", "efg/", "efg/abcd"},
{"abcd", "efg",     "abcd", "efg/", "efg/abcd"},
{"a", "a/",         "a", "a/", "a/a"},
{"a", "a",          "a", "a/", "a/a"},
{"abcd/", "efg/",   "abcd", "efg/", "efg/abcd"},
{"abcd/", "efg",    "abcd", "efg/", "efg/abcd"},
{"a/", "a/",        "a", "a/", "a/a"},
{"a/", "a",         "a", "a/", "a/a"},
{"ab/cd", "ab/cd/",     "ab/cd", "ab/cd/", "ab/cd/ab/cd"},
{"ab/cd/", "ab/cd/",    "ab/cd", "ab/cd/", "ab/cd/ab/cd"}
};
DirectoriesReader_test testedClass;
for (const auto& test : tests) {
THEN(test.log()) {
REQUIRE_NOTHROW(testedClass.makeFile(test.dirName_, test.startpath_));
auto file = testedClass.makeFile(test.dirName_, test.startpath_);
REQUIRE(file.name_ == test.result_name_);
REQUIRE(file.path_ == test.result_path_);
REQUIRE(file.fullname_ == test.result_fullname_);
}
}
}
WHEN("Testing the makeFile() operation, throw cases") {
struct test {
const std::string dirName_;
const std::string startpath_;
std::string log() const {
return 
"{ (" + dirName_ + 
", " + startpath_ +
") }";
}
};
const std::initializer_list<test> bad_tests = {
{"abcd", ""},
{"", "abcd"},
{"", ""},
{std::string(), std::string()},
{"/", "abcd"},
{"ab
{"ab
{"
{"
{"ab
{"ab
{"
{"
{"ab/cd
};
DirectoriesReader_test testedClass;
for (const auto& test : bad_tests) {
THEN(test.log()) {
REQUIRE_THROWS(testedClass.makeFile(test.dirName_, test.startpath_));
}
}
}
}
------------------------
------------------------




class DirectoriesReader_test : public DirectoriesReader {
public:
std::string conditionalSlashAppend(const std::string& startpath) {
return DirectoriesReader::ConditionalSlashAppend(startpath);
}
std::string removeSlashOnEnd (const std::string& dirname) {
return DirectoriesReader::RemoveSlashOnEnd(dirname);
}
bool ignoreListContains(const std::string& data) {
return IgnoreListContains(data);
}
size_t getIgnoreListSize() const { return DirectoriesReader::ignoreDirectories_.size(); }
const std::set<std::string>& getIgnoreList() const { return DirectoriesReader::ignoreDirectories_; }
File makeFile(const std::string& dirName, const std::string& startpath) {
return DirectoriesReader::MakeFile(dirName, startpath);
}
std::vector<File> makeFiles(
const std::vector<std::string>& directoryNames, 
const std::string& startpath) 
{
return DirectoriesReader::MakeFiles(directoryNames, startpath);
}
};
------------------------
------------------------




class DocumentationGenerator {
using ProjectMap = std::vector<std::string>;
const std::string startPath_;
const std::string filename_;
std::vector<File> directories_;
public:
DocumentationGenerator(const std::string& startPath):
startPath_(startPath),
filename_("sup.txt"),
directories_()
{}
void setDirectoriesVector(std::vector<File>& vctr) {
directories_ = vctr;
sortDirectories(directories_);
}
void sortDirectories(std::vector<File>& directories) {
std::sort(directories.begin(), directories.end(), SortCriterion);
for (auto& subDir : directories) {
if (subDir.isCatalog_) {
sortDirectories(subDir.files_);
}
}
}
static bool SortCriterion(const File& f, const File& s) { 
int test = f.isCatalog_ + s.isCatalog_;
if (test % 2 == 0) {
return SecondSortCriterion_Alphabetical(f.name_, s.name_);
}
else {
return s.isCatalog_;
}
}
static bool SecondSortCriterion_Alphabetical(const std::string& f, const std::string& s) { 
return (f < s);
}
bool generate() {
std::string data = "";
data += getHeader();
data += "File generation date: " + getDate();
data += "\n\n";
data += "_____________________________________________\n";
data += "Table of contents:   ------------------------\n";
data += getTableOfContents(directories_);
auto dirs = getDirectories(directories_);
std::map<std::string,std::string> allFilesData;
for (const auto& file : dirs) {
auto fileData_tmp = readFromFile(startPath_ + file);
allFilesData[file] = fileData_tmp; 
}
StateMachine sm;
data += sm.Process(allFilesData);
std::ofstream output(filename_);
if (!output || !output.is_open()) {
return false;
}
output << data;
output.close();
return true;
}
private:
std::string readFromFile(const std::string& path) {
std::string fileData = "";
std::ifstream readFile(path);
std::string tmp;
while (std::getline(readFile, tmp)) {
if (tmp == "\n" || tmp == "") {
continue;
}
fileData += tmp;
fileData += "\n";
}
readFile.close();
return fileData;
}
std::string getHeader() {
return "Author of SUP-SeeYourPoint: Kacu Kacper Kaleta [https:
}
std::string getDate() {
using TimePoint = std::chrono::time_point<std::chrono::system_clock>;
TimePoint thisPoint = std::chrono::system_clock::now();
std::time_t t = std::chrono::system_clock::to_time_t(thisPoint);
std::string date = std::ctime(&t);
return date;
}
std::string getTableOfContents(std::vector<File> directories, size_t tab=1) {
if (directories.size() < 1) {
throw std::logic_error("DocumentationGenerator::getTableOfContents()");
}
std::string result = "";
for (const auto& file : directories) {
result += getTabs(tab);
if (file.isCatalog_) {
result += "[";
result += file.name_;
result += "]\n";
result += getTableOfContents(file.files_, tab + 1);   
result += getTabs(tab);
}
else {
result += file.name_;
}
result += "\n";
}
return result;
}
std::string getTabs(size_t tab=1) {
std::string result = "\t";
for (size_t i = 1; i < tab; ++i) {
result += "|\t";
}
return result;
}
std::vector<std::string> getDirectories(const std::vector<File>& directories, const std::string& path="") {
std::vector<std::string> result;
for (const auto& file : directories) {
if (file.isCatalog_) {
auto subFiles = getDirectories(file.files_, path + file.name_ + "/");
result.insert(result.end(), subFiles.begin(), subFiles.end() );
}
else {
result.push_back(path + file.name_);
}
}
return result;
}
};
------------------------
------------------------




struct File {
bool isCatalog_;
std::string name_;
std::string path_;
std::string fullname_;
std::vector<File> files_; 
explicit File(const std::string& name, const std::string& path): 
isCatalog_(false),
name_(name),
path_(path),
fullname_(path+name),
files_()
{ }
std::string to_string() {
return "(" 
+ name_ + ", "
+ path_ + ", "
+ fullname_ + ")";
}
};
------------------------
------------------------




class IgnoreFileReader {
protected:
const static std::set<std::string> defaultIgnores_;
const static std::string filename_;
explicit IgnoreFileReader() { }
public:
static std::set<std::string> getFilesToIgnore() {
std::ifstream readFile(filename_);
if (!readFile || !readFile.is_open()) {
GenerateDefaultFile();
return defaultIgnores_;
}
std::set<std::string> fileData;
std::string record;
while (std::getline(readFile, record)) {
if (record == "\n" || record == "") {
continue;
}
fileData.insert(record);
}
readFile.close();   
return fileData;
}
private: 
static void GenerateDefaultFile() {
std::ofstream output(filename_);
if (!output || !output.is_open()) {
throw std::logic_error("IgnoreFileReader::getFilesToIgnore() Failed to generate");
}
for (const auto& record : defaultIgnores_) {
output << record << "\n";
}
output.close();
}
};
const std::string IgnoreFileReader::filename_ = ".supignore";
const std::set<std::string> IgnoreFileReader::defaultIgnores_ {
"\n",
"",
" ",
".",
"..",
".git",
".gitignore",
".notes",
".sup",
"notes",
"build",
"tools",
"tags",
"README.md",
"CMakeLists.txt"
};
------------------------
------------------------




struct Node {
const std::string originFile_;
const std::string name_;
const std::string fullName_;
std::vector<std::shared_ptr<Node>> nodes_;
explicit Node(
const std::string& originFile, 
const std::string& name,
const std::string& fullName):
originFile_(originFile),
name_(name),
fullName_(fullName),
nodes_()
{}
};
class StateMachine {
std::vector<Node> collectiveData_;
size_t index_;
std::string processedFileData_;
bool is_multilineComment_;
std::vector<std::string> connectedDirs_;
public:
explicit StateMachine():
collectiveData_(),
index_(),
processedFileData_(),
is_multilineComment_(),
connectedDirs_()
{ }
std::string Process(const std::map<std::string,std::string> allFilesData) {
std::string result = "";
for (const auto& [fileName, fileData] : allFilesData) {
result += "\n\n";
result += ProcessNewFile(fileName, fileData);
result += "------------------------\n";
for (const auto& record : connectedDirs_) {
result += record + "\n";
}
result += "------------------------\n";
result += "\n\n";
}
return result;
}
private:
void initMachine(std::string fileData) {
index_ = 0;
processedFileData_ = fileData;
is_multilineComment_ = false;
connectedDirs_.clear();
}
std::string ProcessNewFile(const std::string& fileName, const std::string& fileData) {
initMachine(fileData);
std::string result = "";
std::string fullNameEntry = "";
Node test (fileName, "class", fullNameEntry + "class");
while (index_ < processedFileData_.size()) {
std::string oneLine = ReadOneLine();
oneLine = StripFromComments(oneLine);
oneLine = StripFromExtraWhiteSpaces(oneLine);
oneLine = StripFromDirectives(oneLine);
if (oneLine != "" && oneLine != "\n") {
result += oneLine + '\n';
}
}
for (const auto& character : fileData) {
if (character != ' ') {
}
}
return result;
}
std::string ReadOneLine() {
std::string result = "";
for ( ; index_ < processedFileData_.size(); ++index_) {
const char character = processedFileData_[index_];
if (character == '\n') {
++index_;
return result;
}
result += character;
}
return result;
}
std::string StripFromDirectives(const std::string& oneLine) {
if (oneLine[0] != '#') {
return oneLine;
}
size_t k = 0;
const std::string code = "include";
size_t i = 1;
for ( ; i < oneLine.size() && k < code.size(); ++i) {
if (oneLine[i] != code[k] && oneLine[i] != ' ') {
return "";
}
else if (oneLine[i] == code[k]) {
++k;
}
}
++i;
for ( ; i < oneLine.size(); ++i) {
if (oneLine[i] != '"' && oneLine[i] != '\"' && oneLine[i] != '<' && oneLine[i] != ' ') {
return "";
}
}
std::string directory = "sup";
for ( ; i < oneLine.size(); ++i) {
if (oneLine[i] == '"' && oneLine[i] == '\"' && oneLine[i] == '>') {
break;
}
directory += oneLine[i];
}
connectedDirs_.push_back(directory);
return "";
}
std::string StripFromExtraWhiteSpaces(const std::string& oneLine) {
std::string result = "";
size_t i = 0;
for ( ; i < oneLine.size(); ++i) {
if (oneLine[i] != ' ' && oneLine[i] != '\n' && oneLine[i] != '\t') {
break;
}
}
for ( ; i < oneLine.size(); ++i) {
result += oneLine[i];
}
return result;
}
std::string StripFromComments(const std::string& oneLine) {
std::string result = "";
bool lastCharacter = true;
size_t i = 1;
while (i < oneLine.size()) {
if (is_multilineComment_) {
if (oneLine[i-1] == '*' && oneLine[i] == '/') {
is_multilineComment_ = false;
lastCharacter = false;
}
}
else {
if (oneLine[i-1] == '/' && oneLine[i] == '/') {
return result;
}
if (oneLine[i-1] == '/' && oneLine[i] == '*') {
is_multilineComment_ = true;
++i;
continue;
}
lastCharacter = true;
result += oneLine[i-1];
}
++i;
}
if (!is_multilineComment_ && lastCharacter && i == oneLine.size()) {
result += oneLine[i-1];
}
return result;
}
};
------------------------
------------------------




------------------------
------------------------




int main() {
const std::string startPath = DefaultFileReader::getStartPath(); 
DirectoriesReader dreader;
DocumentationGenerator dgenerator(startPath);
const auto ignoreDirectories = IgnoreFileReader::getFilesToIgnore();
auto getstuff = dreader.getDirectories(startPath, ignoreDirectories);
dgenerator.setDirectoriesVector(getstuff);
dgenerator.generate();
return 0;
}
------------------------
------------------------


