Author of SUP-SeeYourPoint: Kacu Kacper Kaleta [https://github.com/Ptysiek]
File generation date:  Sat Mar  6 00:29:41 2021


### Table Of Contents: #####################################################
############################################################################

	[source/]
		DataParsers
		DataStructures
		FileBuilder.hpp
		FileDataBuilder.hpp
		GeneratorTxt.hpp
		PathInitializer.ut.cpp
		Program.hpp
		ProgramInitializer.hpp
		ProjectBuilder.hpp
		Tools
		catch_main.cpp
		iSyntaxBuilder.hpp
		main.cpp

		[source/data parsers/]
			CommentParser.ut.cpp
			CommentParser.ut.hpp
			CommentParser.hpp
			DirectiveParser.hpp
			IncludeParser.hpp
			SyntaxParser.hpp

		[source/data structures/]
			Block.hpp
			Class.hpp
			File.hpp
			FileData.hpp
			Instruction.hpp
			SyntaxTypes
			iSyntax.hpp

		[source/tools/]
			Converter.hpp
			FileIO.hpp
			IgnoreFiles.cpp
			IgnoreFiles.hpp




### ../source/DataParsers ##################################################
############################################################################
File content:
[	namespace DataParsers {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Files included:  [4]
		data parsers/CommentParser.hpp
		data parsers/DirectiveParser.hpp
		data parsers/IncludeParser.hpp
		data parsers/SyntaxParser.hpp




### ../source/DataStructures ###############################################
############################################################################
File content:
[	namespace DataStructures {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Libraries included:  [3]
		<memory>
		<string>
		<vector>

	Files included:  [6]
		data structures/Block.hpp
		data structures/Class.hpp
		data structures/File.hpp
		data structures/FileData.hpp
		data structures/Instruction.hpp
		data structures/iSyntax.hpp




### ../source/FileBuilder.hpp ##############################################
############################################################################
File content:
[	Class `FileBuilder` 

	Class Fields:
		const std::string initPath_;
		const std::string path_;
		const std::string name_;
		const std::string format_;
		const File product_;

	Class Operations:
		public: explicit FileBuilder( const std::string& initPath, const std::string& path, const std::string& fullName, const std::vector<File>& subfiles, const size_t depth )
		File getProduct()
		static File buildRoot(const std::string& initPath, const std::vector<File>& subFiles)
		protected: File BuildProduct(const std::vector<File>& subFiles, size_t depth)
		static size_t CountRecursive(const std::vector<File>& subFiles)
		std::string BuildName(const std::string& str, const bool isEmpty)
		std::string CutoutName(const std::string& str)
		std::string CutoutFormat(const std::string& str)]


File summary:
	Libraries included:  [1]
		<string>

	Files included:  [2]
		DataStructures
		Tools




### ../source/FileDataBuilder.hpp ##########################################
############################################################################
File content:
[	using namespace DataParsers;]
[	Class `FileDataBuilder` 

	Class Fields:
		bool productExist_;
		Data rawData_;
		const File& fileHeader_;
		const FileData product_;
		std::vector<std::string> libIncludes_;
		std::vector<std::string> projIncludes_;

	Class Operations:
		public: FileDataBuilder(const File& file)
		bool dataExist()
		FileData getProduct()
		private: FileData BuildProduct()
		FileData BuildEmptyData()
		Data PrepareData(Data rawData)]


File summary:
	Files included:  [3]
		DataParsers
		DataStructures
		Tools




### ../source/GeneratorTxt.hpp #############################################
############################################################################
File content:
[	Class `GeneratorTxt` 

	Class Fields:
		const std::string separator_;
		const std::string targetPath_;
		std::vector<File> data_;

	Class Operations:
		public: explicit GeneratorTxt(const std::string& targetPath, const std::vector<File>& data)
		std::string buildFile()
		private: std::string BuildHeader()
		std::string BuildDate()
		std::string BuildTableOfContents()
		std::string BuildFile(const File& file)
		std::string BuildFileContent(const File& file)
		std::string BuildFileSummary(const File& file)
		std::string BuildSeparator(const std::string& title)]


File summary:
	Libraries included:  [2]
		<chrono>
		<sstream>

	Files included:  [2]
		DataStructures
		Tools




### ../source/PathInitializer.ut.cpp #######################################
############################################################################
File content:
[	TEST_CASE("PathInitializer: static operations", "[CutoutName], [CutoutFormat], [AppendConditionalSlash]") {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Files included:  [2]
		PathInitializer.ut.hpp
		plugins/catch.hpp




### ../source/Program.hpp ##################################################
############################################################################
File content:
[	Class `Program` 

	Class Fields:
		const ProgramInitializer flagSupport_;
		const std::string targetPath_;
		const std::string outputPath_;

	Class Operations:
		public: explicit Program(const ProgramInitializer& target)
		void execute()
		private: void initializeIgnoreFiles()]


File summary:
	Libraries included:  [1]
		<iostream>

	Files included:  [4]
		GeneratorTxt.hpp
		ProgramInitializer.hpp
		ProjectBuilder.hpp
		Tools




### ../source/ProgramInitializer.hpp #######################################
############################################################################
File content:
[	Class `ProgramInitializer` 

	Class Fields:
		const std::string path_;

	Class Operations:
		public: explicit ProgramInitializer(const int& argc, const char* const * const argv)
		std::string getPath()
		std::string getDefaultPath()
		private: std::string GenPath(const int& argc, const char* const * const argv)]


File summary:
	Libraries included:  [1]
		<string>

	Files included:  [1]
		Tools




### ../source/ProjectBuilder.hpp ###########################################
############################################################################
File content:
[	Class `ProjectBuilder` 

	Class Fields:
		const std::string initPath_;
		const Project product_;

	Class Operations:
		public: explicit ProjectBuilder(const std::string& initPath)
		Project getProduct()
		private: Project BuildProduct()
		Project UpdateProjectWithData(Project& project)
		Project BuildProductStructure()
		std::vector<File> BuildRecursive(const std::string& targetPath, int depth)
		Project FlatenRecursive(const File& root)
		static bool SortCriterion_CatalogLast(const File& f, const File& s)
		static bool SortCriterion_Alphabetical(const std::string& f, const std::string& s)]


File summary:
	Libraries included:  [2]
		<algorithm>
		<string>

	Files included:  [4]
		DataStructures
		FileBuilder.hpp
		FileDataBuilder.hpp
		Tools




### ../source/Tools ########################################################
############################################################################
File content:
[	namespace Tools {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Files included:  [3]
		tools/Converter.hpp
		tools/FileIO.hpp
		tools/IgnoreFiles.hpp




### ../source/catch_main.cpp ###############################################
############################################################################
File content:


File summary:
	Files included:  [1]
		plugins/catch.hpp




### ../source/iSyntaxBuilder.hpp ###########################################
############################################################################
File content:
[	Class `iSyntaxBuilder` 

	Class Fields:

	Class Operations:
		public: static BlockSyntax buildBlock(std::string syntaxData)
		static Syntax buildInstruction(const std::string& syntaxData)
		private: static std::string CutOutTemplate(std::string& syntaxData)]


File summary:
	Libraries included:  [1]
		<memory>

	Files included:  [2]
		DataStructures
		Tools




### ../source/main.cpp #####################################################
############################################################################
File content:
[	int main(int argc, char* argv[]) {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Libraries included:  [1]
		<iostream>

	Files included:  [2]
		Program.hpp
		ProgramInitializer.hpp




### ../source/data parsers/CommentParser.ut.cpp ############################
############################################################################
File content:
[	FileParserComments_UnitTest testObject;]
[	TEST_CASE("FileParserComments: base operations", "[IsInsideString], [IsAlreadyCommentedByOneline]") {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]
[	TEST_CASE("FileParserComments: RemoveOneLine operations", "[RemoveOnelineComments], [RemoveAllOnelineComments]") {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Libraries included:  [2]
		<algorithm>
		<numeric>

	Files included:  [2]
		CommentsParser.ut.hpp
		plugins/catch.hpp




### ../source/data parsers/CommentParser.ut.hpp ############################
############################################################################
File content:
[	Class `CommentParser_UnitTest : CommentParser` 

	Class Fields:

	Class Operations:
		public: CommentParser_UnitTest()
		bool IsInsideString(const Line& line)
		bool IsAlreadyCommentedByOneline(const Line& subline)
		Line RemoveOnelineComments(const Line& line)
		Data RemoveAllOnelineComments(const Data& data)
		Line Multiline_ClearLine(const Line& line, bool& isCommented)]


File summary:
	Files included:  [1]
		CommentParser.hpp




### ../source/data parsers/CommentParser.hpp ###############################
############################################################################
File content:
[	/* TODO:
- fix multiline comments
ex: abcd *
namespace DataParsers {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:



### ../source/data parsers/DirectiveParser.hpp #############################
############################################################################
File content:
[	namespace DataParsers {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:
	Files included:  [2]
		../DataStructures
		../Tools




### ../source/data parsers/IncludeParser.hpp ###############################
############################################################################
File content:
[	namespace DataParsers {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:
	Files included:  [2]
		)
		../DataStructures




### ../source/data parsers/SyntaxParser.hpp ################################
############################################################################
File content:
[	namespace DataParsers {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:
	Libraries included:  [3]
		<algorithm>
		<iostream>
		<stack>

	Files included:  [2]
		../DataStructures
		../iSyntaxBuilder.hpp




### ../source/data structures/Block.hpp ####################################
############################################################################
File content:
[	Class `Block : public iSyntax` 

	Class Fields:
		protected:
std::string template_;
		std::string header_;
		std::vector<std::shared_ptr<iSyntax>> subElements_;
		std::vector<std::shared_ptr<iSyntax>> subClasses_;
		std::vector<std::shared_ptr<iSyntax>> subOperations_;
		std::vector<std::shared_ptr<iSyntax>> fields_;

	Class Operations:
		public: Block(const std::string& tem, const std::string& data)
		std::string getResult()
		std::string getResult(size_t tabs)
		void emplace_back(const std::shared_ptr<iSyntax>& subElement)
		Type getSyntaxType()
		protected: size_t CountInstructions()
		size_t CountBlocks()
		size_t CountClasses()]


File summary:
	Libraries included:  [2]
		<numeric>
		<string>

	Files included:  [1]
		iSyntax.hpp




### ../source/data structures/Class.hpp ####################################
############################################################################
File content:
[	Class `Class : public Block` 

	Class Fields:
		std::string className_;
		return result.str();
		}

	Class Operations:
		std::string getResult()
		std::string getResult(size_t tabs)
		Type getSyntaxType()
		private: std::string BuildClassName(std::string header)
		std::string BuildOperations(const std::string& tab)]
[	std::string BuildOperation(std::string data) const {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]
[	};]


File summary:
	Libraries included:  [3]
		<numeric>
		<sstream>
		<string>

	Files included:  [3]
		../Tools
		Block.hpp
		iSyntax.hpp




### ../source/data structures/File.hpp #####################################
############################################################################
File content:
[	Class `File` 

	Class Fields:
		size_t depth_;
		size_t countRecursive_;
		std::string initPath_;
		std::string path_;
		std::string name_;
		std::string format_;
		std::vector<File> subFiles_;
		FileData data_;

	Class Operations:
		public: File( const size_t depth, const size_t countRecursive, const std::string& initPath, const std::string& path, const std::string& name, const std::string& format, const std::vector<File>& subFiles )
		std::string getInitPath()
		std::string getPath()
		std::string getName()
		std::string getFormat()
		std::string getFile()
		std::vector<File> getSubFiles()
		bool isCatalog()
		size_t getDepth()
		size_t countSubFiles()
		size_t countSubFilesRecursive()
		void setData(const FileData& data)
		FileData getData()]


File summary:
	Libraries included:  [2]
		<string>
		<vector>

	Files included:  [1]
		FileData.hpp




### ../source/data structures/FileData.hpp #################################
############################################################################
File content:
[	Class `FileData` 

	Class Fields:
		std::vector<std::string> libIncludes_;
		std::vector<std::string> projIncludes_;
		std::vector<std::shared_ptr<iSyntax>> data_;

	Class Operations:
		public: FileData()
		FileData( const std::vector<std::string>& libIncludes, const std::vector<std::string>& projIncludes, const std::vector<std::shared_ptr<iSyntax>>& data )
		std::vector<std::string> getLibIncludes()
		std::vector<std::string> getProjIncludes()
		std::vector<std::shared_ptr<iSyntax>> getData()
		size_t CountInstructions()
		size_t CountClasses()]


File summary:
	Libraries included:  [3]
		<numeric>
		<string>
		<vector>

	Files included:  [2]
		SyntaxTypes
		iSyntax.hpp




### ../source/data structures/Instruction.hpp ##############################
############################################################################
File content:
[	Class `Instruction : public iSyntax` 

	Class Fields:
		std::string rawData_;

	Class Operations:
		public: Instruction(const std::string& data)
		std::string getResult()
		std::string getResult(size_t tabs)
		Type getSyntaxType()]


File summary:
	Libraries included:  [1]
		<string>

	Files included:  [1]
		iSyntax.hpp




### ../source/data structures/SyntaxTypes ##################################
############################################################################
File content:
[	namespace SyntaxTypes {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:



### ../source/data structures/iSyntax.hpp ##################################
############################################################################
File content:
[	Class `iSyntax` 

	Class Fields:
		virtual std::string getResult() const = 0;
		virtual std::string getResult(size_t) const = 0;
		virtual Type getSyntaxType() const = 0;

	Class Operations:
		public: virtual ~iSyntax()]


File summary:
	Files included:  [1]
		SyntaxTypes




### ../source/tools/Converter.hpp ##########################################
############################################################################
File content:
[	namespace Tools {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:
	Libraries included:  [4]
		<algorithm>
		<set>
		<sstream>
		<vector>




### ../source/tools/FileIO.hpp #############################################
############################################################################
File content:
[	namespace Tools {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:
	Libraries included:  [5]
		<dirent.h>
		<exception>
		<fstream>
		<string>
		<vector>

	Files included:  [1]
		IgnoreFiles.hpp




### ../source/tools/IgnoreFiles.cpp ########################################
############################################################################
File content:
[	namespace Tools {
		Has 0 instructions
		Has 0 classes
		Has 0 blocks]


File summary:
	Libraries included:  [2]
		<string>
		<vector>

	Files included:  [1]
		IgnoreFiles.hpp




### ../source/tools/IgnoreFiles.hpp ########################################
############################################################################
File content:
[	namespace Tools {
		Has 0 instructions
		Has 1 classes
		Has 0 blocks]


File summary:
	Libraries included:  [4]
		<algorithm>
		<set>
		<string>
		<vector>




