Author of SUP-SeeYourPoint: Kacu Kacper Kaleta [https://github.com/Ptysiek]
File generation date:  Sat Mar  6 00:57:36 2021


### Table Of Contents: #####################################################
############################################################################

	[source/]
		DataParsers
		DataStructures
		FileBuilder.hpp
		FileDataBuilder.hpp
		GeneratorTxt.hpp
		PathInitializer.ut.cpp
		Program.hpp
		ProgramInitializer.hpp
		ProjectBuilder.hpp
		Tools
		catch_main.cpp
		iSyntaxBuilder.hpp
		main.cpp

		[source/data parsers/]
			CommentParser.ut.cpp
			CommentParser.ut.hpp
			CommentParser.hpp
			DirectiveParser.hpp
			IncludeParser.hpp
			SyntaxParser.hpp

		[source/data structures/]
			Block.hpp
			Class.hpp
			File.hpp
			FileData.hpp
			Instruction.hpp
			SyntaxTypes
			iSyntax.hpp

		[source/tools/]
			Converter.hpp
			FileIO.hpp
			IgnoreFiles.cpp
			IgnoreFiles.hpp




### ../source/DataParsers ##################################################
############################################################################
File includes:
	Files included:  [4]
		 1] data parsers/CommentParser.hpp
		 2] data parsers/DirectiveParser.hpp
		 3] data parsers/IncludeParser.hpp
		 4] data parsers/SyntaxParser.hpp


File content:
	namespace DataParsers {




### ../source/DataStructures ###############################################
############################################################################
File includes:
	Libraries included:  [3]
		 1] <memory>
		 2] <string>
		 3] <vector>

	Files included:  [7]
		 1] data structures/Block.hpp
		 2] data structures/Class.hpp
		 3] data structures/File.hpp
		 4] data structures/FileData.hpp
		 5] data structures/Instruction.hpp
		 6] data structures/SyntaxTypes
		 7] data structures/iSyntax.hpp


File content:
	namespace DataStructures {




### ../source/FileBuilder.hpp ##############################################
############################################################################
File includes:
	Libraries included:  [1]
		 1] <string>

	Files included:  [2]
		 1] DataStructures
		 2] Tools


File content:
	Class `FileBuilder` {
		Class Fields:
			1] const std::string initPath_;
			2] const std::string path_;
			3] const std::string name_;
			4] const std::string format_;
			5] const File product_;

		Class Operations:
			1] explicit FileBuilder( const std::string& initPath, const std::string& path, const std::string& fullName, const std::vector<File>& subfiles, const size_t depth )
			2] File getProduct()
			3] static File buildRoot(const std::string& initPath, const std::vector<File>& subFiles)
			4] File BuildProduct(const std::vector<File>& subFiles, size_t depth)
			5] static size_t CountRecursive(const std::vector<File>& subFiles)
			6] std::string BuildName(const std::string& str, const bool isEmpty)
			7] std::string CutoutName(const std::string& str)
			8] std::string CutoutFormat(const std::string& str)
	};




### ../source/FileDataBuilder.hpp ##########################################
############################################################################
File includes:
	Files included:  [3]
		 1] DataParsers
		 2] DataStructures
		 3] Tools


File content:
	Class `FileDataBuilder` {
		Class Fields:
			1] bool productExist_;
			2] Data rawData_;
			3] const File& fileHeader_;
			4] const FileData product_;
			5] std::vector<std::string> libIncludes_;
			6] std::vector<std::string> projIncludes_;

		Class Operations:
			1] FileDataBuilder(const File& file)
			2] bool dataExist()
			3] FileData getProduct()
			4] FileData BuildProduct()
			5] FileData BuildEmptyData()
			6] Data PrepareData(Data rawData)
	};




### ../source/GeneratorTxt.hpp #############################################
############################################################################
File includes:
	Libraries included:  [2]
		 1] <chrono>
		 2] <sstream>

	Files included:  [2]
		 1] DataStructures
		 2] Tools


File content:
	Class `GeneratorTxt` {
		Class Fields:
			1] const std::string separator_;
			2] const std::string targetPath_;
			3] std::vector<File> data_;

		Class Operations:
			1] explicit GeneratorTxt(const std::string& targetPath, const std::vector<File>& data)
			2] std::string buildFile()
			3] std::string BuildHeader()
			4] std::string BuildDate()
			5] std::string BuildTableOfContents()
			6] std::string BuildFile(const File& file)
			7] std::string BuildFileContent(const File& file)
			8] std::string BuildFileSummary(const File& file)
			9] std::string BuildSeparator(const std::string& title)
	};




### ../source/PathInitializer.ut.cpp #######################################
############################################################################
File includes:
	Files included:  [2]
		 1] PathInitializer.ut.hpp
		 2] plugins/catch.hpp


File content:
	TEST_CASE("PathInitializer: static operations", "[CutoutName], [CutoutFormat], [AppendConditionalSlash]") {




### ../source/Program.hpp ##################################################
############################################################################
File includes:
	Libraries included:  [1]
		 1] <iostream>

	Files included:  [4]
		 1] GeneratorTxt.hpp
		 2] ProgramInitializer.hpp
		 3] ProjectBuilder.hpp
		 4] Tools


File content:
	Class `Program` {
		Class Fields:
			1] const ProgramInitializer flagSupport_;
			2] const std::string targetPath_;
			3] const std::string outputPath_;

		Class Operations:
			1] explicit Program(const ProgramInitializer& target)
			2] void execute()
			3] void initializeIgnoreFiles()
	};




### ../source/ProgramInitializer.hpp #######################################
############################################################################
File includes:
	Libraries included:  [1]
		 1] <string>

	Files included:  [1]
		 1] Tools


File content:
	Class `ProgramInitializer` {
		Class Fields:
			1] const std::string path_;

		Class Operations:
			1] explicit ProgramInitializer(const int& argc, const char* const * const argv)
			2] std::string getPath()
			3] std::string getDefaultPath()
			4] std::string GenPath(const int& argc, const char* const * const argv)
	};




### ../source/ProjectBuilder.hpp ###########################################
############################################################################
File includes:
	Libraries included:  [2]
		 1] <algorithm>
		 2] <string>

	Files included:  [4]
		 1] DataStructures
		 2] FileBuilder.hpp
		 3] FileDataBuilder.hpp
		 4] Tools


File content:
	Class `ProjectBuilder` {
		Class Fields:
			1] const std::string initPath_;
			2] const Project product_;

		Class Operations:
			1] explicit ProjectBuilder(const std::string& initPath)
			2] Project getProduct()
			3] Project BuildProduct()
			4] Project UpdateProjectWithData(Project& project)
			5] Project BuildProductStructure()
			6] std::vector<File> BuildRecursive(const std::string& targetPath, int depth)
			7] Project FlatenRecursive(const File& root)
			8] static bool SortCriterion_CatalogLast(const File& f, const File& s)
			9] static bool SortCriterion_Alphabetical(const std::string& f, const std::string& s)
	};




### ../source/Tools ########################################################
############################################################################
File includes:
	Files included:  [3]
		 1] tools/Converter.hpp
		 2] tools/FileIO.hpp
		 3] tools/IgnoreFiles.hpp


File content:
	namespace Tools {




### ../source/catch_main.cpp ###############################################
############################################################################
File includes:
	Files included:  [1]
		 1] plugins/catch.hpp


File content:




### ../source/iSyntaxBuilder.hpp ###########################################
############################################################################
File includes:
	Libraries included:  [1]
		 1] <memory>

	Files included:  [2]
		 1] DataStructures
		 2] Tools


File content:
	Class `iSyntaxBuilder` {
		Class Fields:

		Class Operations:
			1] static BlockSyntax buildBlock(std::string syntaxData)
			2] static Syntax buildInstruction(const std::string& syntaxData)
			3] static std::string CutOutTemplate(std::string& syntaxData)
	};




### ../source/main.cpp #####################################################
############################################################################
File includes:
	Libraries included:  [1]
		 1] <iostream>

	Files included:  [2]
		 1] Program.hpp
		 2] ProgramInitializer.hpp


File content:
	int main(int argc, char* argv[]) {




### ../source/data parsers/CommentParser.ut.cpp ############################
############################################################################
File includes:
	Libraries included:  [2]
		 1] <algorithm>
		 2] <numeric>

	Files included:  [2]
		 1] CommentsParser.ut.hpp
		 2] plugins/catch.hpp


File content:
	TEST_CASE("FileParserComments: base operations", "[IsInsideString], [IsAlreadyCommentedByOneline]") {
	TEST_CASE("FileParserComments: RemoveOneLine operations", "[RemoveOnelineComments], [RemoveAllOnelineComments]") {




### ../source/data parsers/CommentParser.ut.hpp ############################
############################################################################
File includes:
	Files included:  [1]
		 1] CommentParser.hpp


File content:
	Class `CommentParser_UnitTest : CommentParser` {
		Class Fields:

		Class Operations:
			1] CommentParser_UnitTest()
			2] bool IsInsideString(const Line& line)
			3] bool IsAlreadyCommentedByOneline(const Line& subline)
			4] Line RemoveOnelineComments(const Line& line)
			5] Data RemoveAllOnelineComments(const Data& data)
			6] Line Multiline_ClearLine(const Line& line, bool& isCommented)
	};




### ../source/data parsers/CommentParser.hpp ###############################
############################################################################
File includes:

File content:
	/* TODO:
- fix multiline comments
ex: abcd *
namespace DataParsers {




### ../source/data parsers/DirectiveParser.hpp #############################
############################################################################
File includes:
	Files included:  [2]
		 1] ../DataStructures
		 2] ../Tools


File content:
	namespace DataParsers {




### ../source/data parsers/IncludeParser.hpp ###############################
############################################################################
File includes:
	Files included:  [2]
		 1] )
		 2] ../DataStructures


File content:
	namespace DataParsers {




### ../source/data parsers/SyntaxParser.hpp ################################
############################################################################
File includes:
	Libraries included:  [3]
		 1] <algorithm>
		 2] <iostream>
		 3] <stack>

	Files included:  [2]
		 1] ../DataStructures
		 2] ../iSyntaxBuilder.hpp


File content:
	namespace DataParsers {




### ../source/data structures/Block.hpp ####################################
############################################################################
File includes:
	Libraries included:  [2]
		 1] <numeric>
		 2] <string>

	Files included:  [1]
		 1] iSyntax.hpp


File content:
	Class `Block : public iSyntax` {
		Class Fields:
			1] protected:
std::string template_;
			2] std::string header_;
			3] std::vector<std::shared_ptr<iSyntax>> subElements_;
			4] std::vector<std::shared_ptr<iSyntax>> subClasses_;
			5] std::vector<std::shared_ptr<iSyntax>> subOperations_;
			6] std::vector<std::shared_ptr<iSyntax>> fields_;

		Class Operations:
			1] Block(const std::string& tem, const std::string& data)
			2] std::string getResult()
			3] std::string getResult(size_t tabs)
			4] void emplace_back(const std::shared_ptr<iSyntax>& subElement)
			5] Type getSyntaxType()
			6] size_t CountInstructions()
			7] size_t CountBlocks()
			8] size_t CountClasses()
	};




### ../source/data structures/Class.hpp ####################################
############################################################################
File includes:
	Libraries included:  [3]
		 1] <numeric>
		 2] <sstream>
		 3] <string>

	Files included:  [3]
		 1] ../Tools
		 2] Block.hpp
		 3] iSyntax.hpp


File content:
	Class `Class : public Block` {
		Class Fields:
			1] std::string className_;

		Class Operations:
			1] std::string getResult()
			2] std::string getResult(size_t tabs)
			3] Type getSyntaxType()
			4] std::string BuildClassName(std::string header)
			5] std::string BuildOperations(const std::string& tab)
			6] std::string BuildOperation(std::string data)
			7] std::string RemoveLabel(std::string data)
	};




### ../source/data structures/File.hpp #####################################
############################################################################
File includes:
	Libraries included:  [2]
		 1] <string>
		 2] <vector>

	Files included:  [1]
		 1] FileData.hpp


File content:
	Class `File` {
		Class Fields:
			1] size_t depth_;
			2] size_t countRecursive_;
			3] std::string initPath_;
			4] std::string path_;
			5] std::string name_;
			6] std::string format_;
			7] std::vector<File> subFiles_;
			8] FileData data_;

		Class Operations:
			1] File( const size_t depth, const size_t countRecursive, const std::string& initPath, const std::string& path, const std::string& name, const std::string& format, const std::vector<File>& subFiles )
			2] std::string getInitPath()
			3] std::string getPath()
			4] std::string getName()
			5] std::string getFormat()
			6] std::string getFile()
			7] std::vector<File> getSubFiles()
			8] bool isCatalog()
			9] size_t getDepth()
			10] size_t countSubFiles()
			11] size_t countSubFilesRecursive()
			12] void setData(const FileData& data)
			13] FileData getData()
	};




### ../source/data structures/FileData.hpp #################################
############################################################################
File includes:
	Libraries included:  [3]
		 1] <numeric>
		 2] <string>
		 3] <vector>

	Files included:  [2]
		 1] SyntaxTypes
		 2] iSyntax.hpp


File content:
	Class `FileData` {
		Class Fields:
			1] std::vector<std::string> libIncludes_;
			2] std::vector<std::string> projIncludes_;
			3] std::vector<std::shared_ptr<iSyntax>> data_;

		Class Operations:
			1] FileData()
			2] FileData( const std::vector<std::string>& libIncludes, const std::vector<std::string>& projIncludes, const std::vector<std::shared_ptr<iSyntax>>& data )
			3] std::vector<std::string> getLibIncludes()
			4] std::vector<std::string> getProjIncludes()
			5] std::vector<std::shared_ptr<iSyntax>> getData()
			6] size_t CountInstructions()
			7] size_t CountClasses()
	};




### ../source/data structures/Instruction.hpp ##############################
############################################################################
File includes:
	Libraries included:  [1]
		 1] <string>

	Files included:  [1]
		 1] iSyntax.hpp


File content:
	Class `Instruction : public iSyntax` {
		Class Fields:
			1] std::string rawData_;

		Class Operations:
			1] Instruction(const std::string& data)
			2] std::string getResult()
			3] std::string getResult(size_t tabs)
			4] Type getSyntaxType()
	};




### ../source/data structures/SyntaxTypes ##################################
############################################################################
File includes:

File content:
	namespace SyntaxTypes {




### ../source/data structures/iSyntax.hpp ##################################
############################################################################
File includes:
	Files included:  [1]
		 1] SyntaxTypes


File content:
	Class `iSyntax` {
		Class Fields:
			1] virtual std::string getResult() const = 0;
			2] virtual std::string getResult(size_t) const = 0;
			3] virtual Type getSyntaxType() const = 0;

		Class Operations:
			1] virtual ~iSyntax()
	};




### ../source/tools/Converter.hpp ##########################################
############################################################################
File includes:
	Libraries included:  [4]
		 1] <algorithm>
		 2] <set>
		 3] <sstream>
		 4] <vector>


File content:
	namespace Tools {




### ../source/tools/FileIO.hpp #############################################
############################################################################
File includes:
	Libraries included:  [5]
		 1] <dirent.h>
		 2] <exception>
		 3] <fstream>
		 4] <string>
		 5] <vector>

	Files included:  [1]
		 1] IgnoreFiles.hpp


File content:
	namespace Tools {




### ../source/tools/IgnoreFiles.cpp ########################################
############################################################################
File includes:
	Libraries included:  [2]
		 1] <string>
		 2] <vector>

	Files included:  [1]
		 1] IgnoreFiles.hpp


File content:
	namespace Tools {




### ../source/tools/IgnoreFiles.hpp ########################################
############################################################################
File includes:
	Libraries included:  [4]
		 1] <algorithm>
		 2] <set>
		 3] <string>
		 4] <vector>


File content:
	namespace Tools {




